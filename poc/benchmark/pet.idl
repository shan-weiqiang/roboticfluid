module benchmark {
  module idl{
  enum PetType {
    DOG,
    CAT,
    BIRD,
    FISH,
    HAMSTER,
    RABBIT,
    SNAKE,
    LIZARD,
    FERRET,
    GUINEA_PIG
  };

  struct Owner {
    string name;
    long age;
  };

  struct OwnerV2 {
    string name;
    long age;
  };

  struct OwnerV3 {
    string name;
    long age;
  };

  struct OwnerV4 {
    string name;
    long age;
  };

  struct Pet {
    double d;
    float f;
    long i32;
    long long i64;
    unsigned long u32;
    unsigned long long u64;
    boolean bval;
    string s;

    double arr_d[10000];
    float arr_f[10000];
    long arr_i32[10000];
    long long arr_i64[10000];
    unsigned long arr_u32[10000];
    unsigned long long arr_u64[10000];
    boolean arr_bval[10000];
    string arr_s[10000];

    sequence<double> vec_d;
    sequence<float> vec_f;
    sequence<long> vec_i32;
    sequence<long long> vec_i64;
    sequence<unsigned long> vec_u32;
    sequence<unsigned long long> vec_u64;
    sequence<boolean> vec_bval;
    sequence<string> vec_s;

    Owner own;
    Owner arr_own[10000];
    sequence<Owner> vec_own;

    OwnerV2 own_v2;
    OwnerV2 arr_own_v2[10000];
    sequence<OwnerV2> vec_own_v2;

    OwnerV3 own_v3;
    OwnerV3 arr_own_v3[10000];
    sequence<OwnerV3> vec_own_v3;

    OwnerV4 own_v4;
    OwnerV4 arr_own_v4[10000];
    sequence<OwnerV4> vec_own_v4;

    PetType pet_type;
    PetType arr_pet_type[10000];
    sequence<PetType> vec_pet_type;

    octet arr_u8[10000];
  };
  };

}; 