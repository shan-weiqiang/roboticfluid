// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pet.proto

#include "pet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace benchmark {
namespace pb {
constexpr Owner::Owner(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , age_(0){}
struct OwnerDefaultTypeInternal {
  constexpr OwnerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OwnerDefaultTypeInternal() {}
  union {
    Owner _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OwnerDefaultTypeInternal _Owner_default_instance_;
constexpr OwnerV2::OwnerV2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , age_(0){}
struct OwnerV2DefaultTypeInternal {
  constexpr OwnerV2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OwnerV2DefaultTypeInternal() {}
  union {
    OwnerV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OwnerV2DefaultTypeInternal _OwnerV2_default_instance_;
constexpr OwnerV3::OwnerV3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , age_(0){}
struct OwnerV3DefaultTypeInternal {
  constexpr OwnerV3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OwnerV3DefaultTypeInternal() {}
  union {
    OwnerV3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OwnerV3DefaultTypeInternal _OwnerV3_default_instance_;
constexpr OwnerV4::OwnerV4(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , age_(0){}
struct OwnerV4DefaultTypeInternal {
  constexpr OwnerV4DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OwnerV4DefaultTypeInternal() {}
  union {
    OwnerV4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OwnerV4DefaultTypeInternal _OwnerV4_default_instance_;
constexpr Pet::Pet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arr_d_()
  , arr_f_()
  , arr_i32_()
  , _arr_i32_cached_byte_size_(0)
  , arr_i64_()
  , _arr_i64_cached_byte_size_(0)
  , arr_u32_()
  , _arr_u32_cached_byte_size_(0)
  , arr_u64_()
  , _arr_u64_cached_byte_size_(0)
  , arr_bval_()
  , arr_s_()
  , vec_d_()
  , vec_f_()
  , vec_i32_()
  , _vec_i32_cached_byte_size_(0)
  , vec_i64_()
  , _vec_i64_cached_byte_size_(0)
  , vec_u32_()
  , _vec_u32_cached_byte_size_(0)
  , vec_u64_()
  , _vec_u64_cached_byte_size_(0)
  , vec_bval_()
  , vec_s_()
  , arr_own_()
  , vec_own_()
  , arr_own_v2_()
  , vec_own_v2_()
  , arr_own_v3_()
  , vec_own_v3_()
  , arr_own_v4_()
  , vec_own_v4_()
  , arr_pet_type_()
  , _arr_pet_type_cached_byte_size_(0)
  , vec_pet_type_()
  , _vec_pet_type_cached_byte_size_(0)
  , s_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , arr_u8_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , own_(nullptr)
  , own_v2_(nullptr)
  , own_v3_(nullptr)
  , own_v4_(nullptr)
  , d_(0)
  , f_(0)
  , i32_(0)
  , i64_(int64_t{0})
  , u64_(uint64_t{0u})
  , u32_(0u)
  , bval_(false)
  , pet_type_(0)
{}
struct PetDefaultTypeInternal {
  constexpr PetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PetDefaultTypeInternal() {}
  union {
    Pet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PetDefaultTypeInternal _Pet_default_instance_;
}  // namespace pb
}  // namespace benchmark
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pet_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pet_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pet_2eproto = nullptr;

const uint32_t TableStruct_pet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Owner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Owner, name_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Owner, age_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::OwnerV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::OwnerV2, name_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::OwnerV2, age_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::OwnerV3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::OwnerV3, name_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::OwnerV3, age_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::OwnerV4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::OwnerV4, name_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::OwnerV4, age_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, d_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, f_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, i32_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, i64_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, u32_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, u64_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, bval_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, s_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_d_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_f_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_i32_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_i64_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_u32_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_u64_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_bval_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_s_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_d_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_f_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_i32_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_i64_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_u32_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_u64_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_bval_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_s_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, own_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_own_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_own_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, own_v2_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_own_v2_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_own_v2_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, own_v3_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_own_v3_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_own_v3_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, own_v4_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_own_v4_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_own_v4_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, pet_type_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_pet_type_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, vec_pet_type_),
  PROTOBUF_FIELD_OFFSET(::benchmark::pb::Pet, arr_u8_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::benchmark::pb::Owner)},
  { 8, -1, -1, sizeof(::benchmark::pb::OwnerV2)},
  { 16, -1, -1, sizeof(::benchmark::pb::OwnerV3)},
  { 24, -1, -1, sizeof(::benchmark::pb::OwnerV4)},
  { 32, -1, -1, sizeof(::benchmark::pb::Pet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::benchmark::pb::_Owner_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::benchmark::pb::_OwnerV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::benchmark::pb::_OwnerV3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::benchmark::pb::_OwnerV4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::benchmark::pb::_Pet_default_instance_),
};

const char descriptor_table_protodef_pet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tpet.proto\022\014benchmark.pb\"\"\n\005Owner\022\014\n\004na"
  "me\030\001 \001(\t\022\013\n\003age\030\002 \001(\005\"$\n\007OwnerV2\022\014\n\004name"
  "\030\001 \001(\t\022\013\n\003age\030\002 \001(\005\"$\n\007OwnerV3\022\014\n\004name\030\001"
  " \001(\t\022\013\n\003age\030\002 \001(\005\"$\n\007OwnerV4\022\014\n\004name\030\001 \001"
  "(\t\022\013\n\003age\030\002 \001(\005\"\346\007\n\003Pet\022\t\n\001d\030\001 \001(\001\022\t\n\001f\030"
  "\002 \001(\002\022\013\n\003i32\030\003 \001(\005\022\013\n\003i64\030\004 \001(\003\022\013\n\003u32\030\005"
  " \001(\r\022\013\n\003u64\030\006 \001(\004\022\014\n\004bval\030\007 \001(\010\022\t\n\001s\030\010 \001"
  "(\t\022\r\n\005arr_d\030\t \003(\001\022\r\n\005arr_f\030\n \003(\002\022\017\n\007arr_"
  "i32\030\013 \003(\005\022\017\n\007arr_i64\030\014 \003(\003\022\017\n\007arr_u32\030\r "
  "\003(\r\022\017\n\007arr_u64\030\016 \003(\004\022\020\n\010arr_bval\030\017 \003(\010\022\r"
  "\n\005arr_s\030\020 \003(\t\022\r\n\005vec_d\030\021 \003(\001\022\r\n\005vec_f\030\022 "
  "\003(\002\022\017\n\007vec_i32\030\023 \003(\005\022\017\n\007vec_i64\030\024 \003(\003\022\017\n"
  "\007vec_u32\030\025 \003(\r\022\017\n\007vec_u64\030\026 \003(\004\022\020\n\010vec_b"
  "val\030\027 \003(\010\022\r\n\005vec_s\030\030 \003(\t\022 \n\003own\030\031 \001(\0132\023."
  "benchmark.pb.Owner\022$\n\007arr_own\030\032 \003(\0132\023.be"
  "nchmark.pb.Owner\022$\n\007vec_own\030\033 \003(\0132\023.benc"
  "hmark.pb.Owner\022%\n\006own_v2\030\034 \001(\0132\025.benchma"
  "rk.pb.OwnerV2\022)\n\narr_own_v2\030\035 \003(\0132\025.benc"
  "hmark.pb.OwnerV2\022)\n\nvec_own_v2\030\036 \003(\0132\025.b"
  "enchmark.pb.OwnerV2\022%\n\006own_v3\030\037 \001(\0132\025.be"
  "nchmark.pb.OwnerV3\022)\n\narr_own_v3\030  \003(\0132\025"
  ".benchmark.pb.OwnerV3\022)\n\nvec_own_v3\030! \003("
  "\0132\025.benchmark.pb.OwnerV3\022%\n\006own_v4\030\" \001(\013"
  "2\025.benchmark.pb.OwnerV4\022)\n\narr_own_v4\030# "
  "\003(\0132\025.benchmark.pb.OwnerV4\022)\n\nvec_own_v4"
  "\030$ \003(\0132\025.benchmark.pb.OwnerV4\022\'\n\010pet_typ"
  "e\030% \001(\0162\025.benchmark.pb.PetType\022+\n\014arr_pe"
  "t_type\030& \003(\0162\025.benchmark.pb.PetType\022+\n\014v"
  "ec_pet_type\030\' \003(\0162\025.benchmark.pb.PetType"
  "\022\016\n\006arr_u8\030( \001(\014*{\n\007PetType\022\007\n\003DOG\020\000\022\007\n\003"
  "CAT\020\001\022\010\n\004BIRD\020\002\022\010\n\004FISH\020\003\022\013\n\007HAMSTER\020\004\022\n"
  "\n\006RABBIT\020\005\022\t\n\005SNAKE\020\006\022\n\n\006LIZARD\020\007\022\n\n\006FER"
  "RET\020\010\022\016\n\nGUINEA_PIG\020\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pet_2eproto = {
  false, false, 1309, descriptor_table_protodef_pet_2eproto, "pet.proto", 
  &descriptor_table_pet_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_pet_2eproto::offsets,
  file_level_metadata_pet_2eproto, file_level_enum_descriptors_pet_2eproto, file_level_service_descriptors_pet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pet_2eproto_getter() {
  return &descriptor_table_pet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pet_2eproto(&descriptor_table_pet_2eproto);
namespace benchmark {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pet_2eproto);
  return file_level_enum_descriptors_pet_2eproto[0];
}
bool PetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Owner::_Internal {
 public:
};

Owner::Owner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:benchmark.pb.Owner)
}
Owner::Owner(const Owner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  age_ = from.age_;
  // @@protoc_insertion_point(copy_constructor:benchmark.pb.Owner)
}

inline void Owner::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
age_ = 0;
}

Owner::~Owner() {
  // @@protoc_insertion_point(destructor:benchmark.pb.Owner)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Owner::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Owner::ArenaDtor(void* object) {
  Owner* _this = reinterpret_cast< Owner* >(object);
  (void)_this;
}
void Owner::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Owner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Owner::Clear() {
// @@protoc_insertion_point(message_clear_start:benchmark.pb.Owner)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  age_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Owner::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "benchmark.pb.Owner.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Owner::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchmark.pb.Owner)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "benchmark.pb.Owner.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_age(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchmark.pb.Owner)
  return target;
}

size_t Owner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchmark.pb.Owner)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Owner::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Owner::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Owner::GetClassData() const { return &_class_data_; }

void Owner::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Owner *>(to)->MergeFrom(
      static_cast<const Owner &>(from));
}


void Owner::MergeFrom(const Owner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchmark.pb.Owner)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Owner::CopyFrom(const Owner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchmark.pb.Owner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Owner::IsInitialized() const {
  return true;
}

void Owner::InternalSwap(Owner* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(age_, other->age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Owner::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pet_2eproto_getter, &descriptor_table_pet_2eproto_once,
      file_level_metadata_pet_2eproto[0]);
}

// ===================================================================

class OwnerV2::_Internal {
 public:
};

OwnerV2::OwnerV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:benchmark.pb.OwnerV2)
}
OwnerV2::OwnerV2(const OwnerV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  age_ = from.age_;
  // @@protoc_insertion_point(copy_constructor:benchmark.pb.OwnerV2)
}

inline void OwnerV2::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
age_ = 0;
}

OwnerV2::~OwnerV2() {
  // @@protoc_insertion_point(destructor:benchmark.pb.OwnerV2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OwnerV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OwnerV2::ArenaDtor(void* object) {
  OwnerV2* _this = reinterpret_cast< OwnerV2* >(object);
  (void)_this;
}
void OwnerV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OwnerV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OwnerV2::Clear() {
// @@protoc_insertion_point(message_clear_start:benchmark.pb.OwnerV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  age_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "benchmark.pb.OwnerV2.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnerV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchmark.pb.OwnerV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "benchmark.pb.OwnerV2.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_age(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchmark.pb.OwnerV2)
  return target;
}

size_t OwnerV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchmark.pb.OwnerV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnerV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OwnerV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnerV2::GetClassData() const { return &_class_data_; }

void OwnerV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OwnerV2 *>(to)->MergeFrom(
      static_cast<const OwnerV2 &>(from));
}


void OwnerV2::MergeFrom(const OwnerV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchmark.pb.OwnerV2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnerV2::CopyFrom(const OwnerV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchmark.pb.OwnerV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerV2::IsInitialized() const {
  return true;
}

void OwnerV2::InternalSwap(OwnerV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(age_, other->age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerV2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pet_2eproto_getter, &descriptor_table_pet_2eproto_once,
      file_level_metadata_pet_2eproto[1]);
}

// ===================================================================

class OwnerV3::_Internal {
 public:
};

OwnerV3::OwnerV3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:benchmark.pb.OwnerV3)
}
OwnerV3::OwnerV3(const OwnerV3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  age_ = from.age_;
  // @@protoc_insertion_point(copy_constructor:benchmark.pb.OwnerV3)
}

inline void OwnerV3::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
age_ = 0;
}

OwnerV3::~OwnerV3() {
  // @@protoc_insertion_point(destructor:benchmark.pb.OwnerV3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OwnerV3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OwnerV3::ArenaDtor(void* object) {
  OwnerV3* _this = reinterpret_cast< OwnerV3* >(object);
  (void)_this;
}
void OwnerV3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OwnerV3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OwnerV3::Clear() {
// @@protoc_insertion_point(message_clear_start:benchmark.pb.OwnerV3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  age_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerV3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "benchmark.pb.OwnerV3.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnerV3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchmark.pb.OwnerV3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "benchmark.pb.OwnerV3.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_age(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchmark.pb.OwnerV3)
  return target;
}

size_t OwnerV3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchmark.pb.OwnerV3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnerV3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OwnerV3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnerV3::GetClassData() const { return &_class_data_; }

void OwnerV3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OwnerV3 *>(to)->MergeFrom(
      static_cast<const OwnerV3 &>(from));
}


void OwnerV3::MergeFrom(const OwnerV3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchmark.pb.OwnerV3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnerV3::CopyFrom(const OwnerV3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchmark.pb.OwnerV3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerV3::IsInitialized() const {
  return true;
}

void OwnerV3::InternalSwap(OwnerV3* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(age_, other->age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerV3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pet_2eproto_getter, &descriptor_table_pet_2eproto_once,
      file_level_metadata_pet_2eproto[2]);
}

// ===================================================================

class OwnerV4::_Internal {
 public:
};

OwnerV4::OwnerV4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:benchmark.pb.OwnerV4)
}
OwnerV4::OwnerV4(const OwnerV4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  age_ = from.age_;
  // @@protoc_insertion_point(copy_constructor:benchmark.pb.OwnerV4)
}

inline void OwnerV4::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
age_ = 0;
}

OwnerV4::~OwnerV4() {
  // @@protoc_insertion_point(destructor:benchmark.pb.OwnerV4)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OwnerV4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OwnerV4::ArenaDtor(void* object) {
  OwnerV4* _this = reinterpret_cast< OwnerV4* >(object);
  (void)_this;
}
void OwnerV4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OwnerV4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OwnerV4::Clear() {
// @@protoc_insertion_point(message_clear_start:benchmark.pb.OwnerV4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  age_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerV4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "benchmark.pb.OwnerV4.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnerV4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchmark.pb.OwnerV4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "benchmark.pb.OwnerV4.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_age(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchmark.pb.OwnerV4)
  return target;
}

size_t OwnerV4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchmark.pb.OwnerV4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnerV4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OwnerV4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnerV4::GetClassData() const { return &_class_data_; }

void OwnerV4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OwnerV4 *>(to)->MergeFrom(
      static_cast<const OwnerV4 &>(from));
}


void OwnerV4::MergeFrom(const OwnerV4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchmark.pb.OwnerV4)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnerV4::CopyFrom(const OwnerV4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchmark.pb.OwnerV4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerV4::IsInitialized() const {
  return true;
}

void OwnerV4::InternalSwap(OwnerV4* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(age_, other->age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerV4::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pet_2eproto_getter, &descriptor_table_pet_2eproto_once,
      file_level_metadata_pet_2eproto[3]);
}

// ===================================================================

class Pet::_Internal {
 public:
  static const ::benchmark::pb::Owner& own(const Pet* msg);
  static const ::benchmark::pb::OwnerV2& own_v2(const Pet* msg);
  static const ::benchmark::pb::OwnerV3& own_v3(const Pet* msg);
  static const ::benchmark::pb::OwnerV4& own_v4(const Pet* msg);
};

const ::benchmark::pb::Owner&
Pet::_Internal::own(const Pet* msg) {
  return *msg->own_;
}
const ::benchmark::pb::OwnerV2&
Pet::_Internal::own_v2(const Pet* msg) {
  return *msg->own_v2_;
}
const ::benchmark::pb::OwnerV3&
Pet::_Internal::own_v3(const Pet* msg) {
  return *msg->own_v3_;
}
const ::benchmark::pb::OwnerV4&
Pet::_Internal::own_v4(const Pet* msg) {
  return *msg->own_v4_;
}
Pet::Pet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arr_d_(arena),
  arr_f_(arena),
  arr_i32_(arena),
  arr_i64_(arena),
  arr_u32_(arena),
  arr_u64_(arena),
  arr_bval_(arena),
  arr_s_(arena),
  vec_d_(arena),
  vec_f_(arena),
  vec_i32_(arena),
  vec_i64_(arena),
  vec_u32_(arena),
  vec_u64_(arena),
  vec_bval_(arena),
  vec_s_(arena),
  arr_own_(arena),
  vec_own_(arena),
  arr_own_v2_(arena),
  vec_own_v2_(arena),
  arr_own_v3_(arena),
  vec_own_v3_(arena),
  arr_own_v4_(arena),
  vec_own_v4_(arena),
  arr_pet_type_(arena),
  vec_pet_type_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:benchmark.pb.Pet)
}
Pet::Pet(const Pet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arr_d_(from.arr_d_),
      arr_f_(from.arr_f_),
      arr_i32_(from.arr_i32_),
      arr_i64_(from.arr_i64_),
      arr_u32_(from.arr_u32_),
      arr_u64_(from.arr_u64_),
      arr_bval_(from.arr_bval_),
      arr_s_(from.arr_s_),
      vec_d_(from.vec_d_),
      vec_f_(from.vec_f_),
      vec_i32_(from.vec_i32_),
      vec_i64_(from.vec_i64_),
      vec_u32_(from.vec_u32_),
      vec_u64_(from.vec_u64_),
      vec_bval_(from.vec_bval_),
      vec_s_(from.vec_s_),
      arr_own_(from.arr_own_),
      vec_own_(from.vec_own_),
      arr_own_v2_(from.arr_own_v2_),
      vec_own_v2_(from.vec_own_v2_),
      arr_own_v3_(from.arr_own_v3_),
      vec_own_v3_(from.vec_own_v3_),
      arr_own_v4_(from.arr_own_v4_),
      vec_own_v4_(from.vec_own_v4_),
      arr_pet_type_(from.arr_pet_type_),
      vec_pet_type_(from.vec_pet_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s().empty()) {
    s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s(), 
      GetArenaForAllocation());
  }
  arr_u8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    arr_u8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arr_u8().empty()) {
    arr_u8_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_arr_u8(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_own()) {
    own_ = new ::benchmark::pb::Owner(*from.own_);
  } else {
    own_ = nullptr;
  }
  if (from._internal_has_own_v2()) {
    own_v2_ = new ::benchmark::pb::OwnerV2(*from.own_v2_);
  } else {
    own_v2_ = nullptr;
  }
  if (from._internal_has_own_v3()) {
    own_v3_ = new ::benchmark::pb::OwnerV3(*from.own_v3_);
  } else {
    own_v3_ = nullptr;
  }
  if (from._internal_has_own_v4()) {
    own_v4_ = new ::benchmark::pb::OwnerV4(*from.own_v4_);
  } else {
    own_v4_ = nullptr;
  }
  ::memcpy(&d_, &from.d_,
    static_cast<size_t>(reinterpret_cast<char*>(&pet_type_) -
    reinterpret_cast<char*>(&d_)) + sizeof(pet_type_));
  // @@protoc_insertion_point(copy_constructor:benchmark.pb.Pet)
}

inline void Pet::SharedCtor() {
s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
arr_u8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  arr_u8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&own_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pet_type_) -
    reinterpret_cast<char*>(&own_)) + sizeof(pet_type_));
}

Pet::~Pet() {
  // @@protoc_insertion_point(destructor:benchmark.pb.Pet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arr_u8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete own_;
  if (this != internal_default_instance()) delete own_v2_;
  if (this != internal_default_instance()) delete own_v3_;
  if (this != internal_default_instance()) delete own_v4_;
}

void Pet::ArenaDtor(void* object) {
  Pet* _this = reinterpret_cast< Pet* >(object);
  (void)_this;
}
void Pet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pet::Clear() {
// @@protoc_insertion_point(message_clear_start:benchmark.pb.Pet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_d_.Clear();
  arr_f_.Clear();
  arr_i32_.Clear();
  arr_i64_.Clear();
  arr_u32_.Clear();
  arr_u64_.Clear();
  arr_bval_.Clear();
  arr_s_.Clear();
  vec_d_.Clear();
  vec_f_.Clear();
  vec_i32_.Clear();
  vec_i64_.Clear();
  vec_u32_.Clear();
  vec_u64_.Clear();
  vec_bval_.Clear();
  vec_s_.Clear();
  arr_own_.Clear();
  vec_own_.Clear();
  arr_own_v2_.Clear();
  vec_own_v2_.Clear();
  arr_own_v3_.Clear();
  vec_own_v3_.Clear();
  arr_own_v4_.Clear();
  vec_own_v4_.Clear();
  arr_pet_type_.Clear();
  vec_pet_type_.Clear();
  s_.ClearToEmpty();
  arr_u8_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && own_ != nullptr) {
    delete own_;
  }
  own_ = nullptr;
  if (GetArenaForAllocation() == nullptr && own_v2_ != nullptr) {
    delete own_v2_;
  }
  own_v2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && own_v3_ != nullptr) {
    delete own_v3_;
  }
  own_v3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && own_v4_ != nullptr) {
    delete own_v4_;
  }
  own_v4_ = nullptr;
  ::memset(&d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pet_type_) -
      reinterpret_cast<char*>(&d_)) + sizeof(pet_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float f = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          f_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 i32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          i32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 i64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          i64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 u32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          u32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 u64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          u64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bval = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          bval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string s = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "benchmark.pb.Pet.s"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double arr_d = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_arr_d(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 73) {
          _internal_add_arr_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated float arr_f = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arr_f(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 85) {
          _internal_add_arr_f(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 arr_i32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_arr_i32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_arr_i32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 arr_i64 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_arr_i64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_arr_i64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 arr_u32 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_arr_u32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          _internal_add_arr_u32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 arr_u64 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_arr_u64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_arr_u64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool arr_bval = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_arr_bval(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          _internal_add_arr_bval(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string arr_s = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_arr_s();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "benchmark.pb.Pet.arr_s"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double vec_d = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vec_d(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 137) {
          _internal_add_vec_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated float vec_f = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vec_f(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 149) {
          _internal_add_vec_f(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 vec_i32 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vec_i32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 152) {
          _internal_add_vec_i32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 vec_i64 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_vec_i64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 160) {
          _internal_add_vec_i64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 vec_u32 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vec_u32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 168) {
          _internal_add_vec_u32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 vec_u64 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_vec_u64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 176) {
          _internal_add_vec_u64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool vec_bval = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_vec_bval(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 184) {
          _internal_add_vec_bval(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string vec_s = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_vec_s();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "benchmark.pb.Pet.vec_s"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .benchmark.pb.Owner own = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_own(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .benchmark.pb.Owner arr_own = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_arr_own(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .benchmark.pb.Owner vec_own = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_vec_own(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .benchmark.pb.OwnerV2 own_v2 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_own_v2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .benchmark.pb.OwnerV2 arr_own_v2 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_arr_own_v2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .benchmark.pb.OwnerV2 vec_own_v2 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_vec_own_v2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .benchmark.pb.OwnerV3 own_v3 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_own_v3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .benchmark.pb.OwnerV3 arr_own_v3 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_arr_own_v3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .benchmark.pb.OwnerV3 vec_own_v3 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_vec_own_v3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .benchmark.pb.OwnerV4 own_v4 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_own_v4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .benchmark.pb.OwnerV4 arr_own_v4 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_arr_own_v4(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .benchmark.pb.OwnerV4 vec_own_v4 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_vec_own_v4(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .benchmark.pb.PetType pet_type = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pet_type(static_cast<::benchmark::pb::PetType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .benchmark.pb.PetType arr_pet_type = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_arr_pet_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_arr_pet_type(static_cast<::benchmark::pb::PetType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .benchmark.pb.PetType vec_pet_type = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_vec_pet_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_vec_pet_type(static_cast<::benchmark::pb::PetType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes arr_u8 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_arr_u8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:benchmark.pb.Pet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double d = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d = this->_internal_d();
  uint64_t raw_d;
  memcpy(&raw_d, &tmp_d, sizeof(tmp_d));
  if (raw_d != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_d(), target);
  }

  // float f = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f = this->_internal_f();
  uint32_t raw_f;
  memcpy(&raw_f, &tmp_f, sizeof(tmp_f));
  if (raw_f != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f(), target);
  }

  // int32 i32 = 3;
  if (this->_internal_i32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_i32(), target);
  }

  // int64 i64 = 4;
  if (this->_internal_i64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_i64(), target);
  }

  // uint32 u32 = 5;
  if (this->_internal_u32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_u32(), target);
  }

  // uint64 u64 = 6;
  if (this->_internal_u64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_u64(), target);
  }

  // bool bval = 7;
  if (this->_internal_bval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_bval(), target);
  }

  // string s = 8;
  if (!this->_internal_s().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "benchmark.pb.Pet.s");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_s(), target);
  }

  // repeated double arr_d = 9;
  if (this->_internal_arr_d_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_arr_d(), target);
  }

  // repeated float arr_f = 10;
  if (this->_internal_arr_f_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_arr_f(), target);
  }

  // repeated int32 arr_i32 = 11;
  {
    int byte_size = _arr_i32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          11, _internal_arr_i32(), byte_size, target);
    }
  }

  // repeated int64 arr_i64 = 12;
  {
    int byte_size = _arr_i64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          12, _internal_arr_i64(), byte_size, target);
    }
  }

  // repeated uint32 arr_u32 = 13;
  {
    int byte_size = _arr_u32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          13, _internal_arr_u32(), byte_size, target);
    }
  }

  // repeated uint64 arr_u64 = 14;
  {
    int byte_size = _arr_u64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          14, _internal_arr_u64(), byte_size, target);
    }
  }

  // repeated bool arr_bval = 15;
  if (this->_internal_arr_bval_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_arr_bval(), target);
  }

  // repeated string arr_s = 16;
  for (int i = 0, n = this->_internal_arr_s_size(); i < n; i++) {
    const auto& s = this->_internal_arr_s(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "benchmark.pb.Pet.arr_s");
    target = stream->WriteString(16, s, target);
  }

  // repeated double vec_d = 17;
  if (this->_internal_vec_d_size() > 0) {
    target = stream->WriteFixedPacked(17, _internal_vec_d(), target);
  }

  // repeated float vec_f = 18;
  if (this->_internal_vec_f_size() > 0) {
    target = stream->WriteFixedPacked(18, _internal_vec_f(), target);
  }

  // repeated int32 vec_i32 = 19;
  {
    int byte_size = _vec_i32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          19, _internal_vec_i32(), byte_size, target);
    }
  }

  // repeated int64 vec_i64 = 20;
  {
    int byte_size = _vec_i64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          20, _internal_vec_i64(), byte_size, target);
    }
  }

  // repeated uint32 vec_u32 = 21;
  {
    int byte_size = _vec_u32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          21, _internal_vec_u32(), byte_size, target);
    }
  }

  // repeated uint64 vec_u64 = 22;
  {
    int byte_size = _vec_u64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          22, _internal_vec_u64(), byte_size, target);
    }
  }

  // repeated bool vec_bval = 23;
  if (this->_internal_vec_bval_size() > 0) {
    target = stream->WriteFixedPacked(23, _internal_vec_bval(), target);
  }

  // repeated string vec_s = 24;
  for (int i = 0, n = this->_internal_vec_s_size(); i < n; i++) {
    const auto& s = this->_internal_vec_s(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "benchmark.pb.Pet.vec_s");
    target = stream->WriteString(24, s, target);
  }

  // .benchmark.pb.Owner own = 25;
  if (this->_internal_has_own()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::own(this), target, stream);
  }

  // repeated .benchmark.pb.Owner arr_own = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arr_own_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_arr_own(i), target, stream);
  }

  // repeated .benchmark.pb.Owner vec_own = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_own_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_vec_own(i), target, stream);
  }

  // .benchmark.pb.OwnerV2 own_v2 = 28;
  if (this->_internal_has_own_v2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::own_v2(this), target, stream);
  }

  // repeated .benchmark.pb.OwnerV2 arr_own_v2 = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arr_own_v2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_arr_own_v2(i), target, stream);
  }

  // repeated .benchmark.pb.OwnerV2 vec_own_v2 = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_own_v2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_vec_own_v2(i), target, stream);
  }

  // .benchmark.pb.OwnerV3 own_v3 = 31;
  if (this->_internal_has_own_v3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::own_v3(this), target, stream);
  }

  // repeated .benchmark.pb.OwnerV3 arr_own_v3 = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arr_own_v3_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_arr_own_v3(i), target, stream);
  }

  // repeated .benchmark.pb.OwnerV3 vec_own_v3 = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_own_v3_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_vec_own_v3(i), target, stream);
  }

  // .benchmark.pb.OwnerV4 own_v4 = 34;
  if (this->_internal_has_own_v4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::own_v4(this), target, stream);
  }

  // repeated .benchmark.pb.OwnerV4 arr_own_v4 = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arr_own_v4_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, this->_internal_arr_own_v4(i), target, stream);
  }

  // repeated .benchmark.pb.OwnerV4 vec_own_v4 = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_own_v4_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, this->_internal_vec_own_v4(i), target, stream);
  }

  // .benchmark.pb.PetType pet_type = 37;
  if (this->_internal_pet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      37, this->_internal_pet_type(), target);
  }

  // repeated .benchmark.pb.PetType arr_pet_type = 38;
  {
    int byte_size = _arr_pet_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          38, arr_pet_type_, byte_size, target);
    }
  }

  // repeated .benchmark.pb.PetType vec_pet_type = 39;
  {
    int byte_size = _vec_pet_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          39, vec_pet_type_, byte_size, target);
    }
  }

  // bytes arr_u8 = 40;
  if (!this->_internal_arr_u8().empty()) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_arr_u8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:benchmark.pb.Pet)
  return target;
}

size_t Pet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:benchmark.pb.Pet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double arr_d = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arr_d_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float arr_f = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arr_f_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 arr_i32 = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->arr_i32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arr_i32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 arr_i64 = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->arr_i64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arr_i64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 arr_u32 = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->arr_u32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arr_u32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 arr_u64 = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->arr_u64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arr_u64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool arr_bval = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arr_bval_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated string arr_s = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(arr_s_.size());
  for (int i = 0, n = arr_s_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      arr_s_.Get(i));
  }

  // repeated double vec_d = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vec_d_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float vec_f = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vec_f_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 vec_i32 = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vec_i32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_i32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 vec_i64 = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->vec_i64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_i64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 vec_u32 = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vec_u32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_u32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 vec_u64 = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->vec_u64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_u64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool vec_bval = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vec_bval_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated string vec_s = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(vec_s_.size());
  for (int i = 0, n = vec_s_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      vec_s_.Get(i));
  }

  // repeated .benchmark.pb.Owner arr_own = 26;
  total_size += 2UL * this->_internal_arr_own_size();
  for (const auto& msg : this->arr_own_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .benchmark.pb.Owner vec_own = 27;
  total_size += 2UL * this->_internal_vec_own_size();
  for (const auto& msg : this->vec_own_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .benchmark.pb.OwnerV2 arr_own_v2 = 29;
  total_size += 2UL * this->_internal_arr_own_v2_size();
  for (const auto& msg : this->arr_own_v2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .benchmark.pb.OwnerV2 vec_own_v2 = 30;
  total_size += 2UL * this->_internal_vec_own_v2_size();
  for (const auto& msg : this->vec_own_v2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .benchmark.pb.OwnerV3 arr_own_v3 = 32;
  total_size += 2UL * this->_internal_arr_own_v3_size();
  for (const auto& msg : this->arr_own_v3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .benchmark.pb.OwnerV3 vec_own_v3 = 33;
  total_size += 2UL * this->_internal_vec_own_v3_size();
  for (const auto& msg : this->vec_own_v3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .benchmark.pb.OwnerV4 arr_own_v4 = 35;
  total_size += 2UL * this->_internal_arr_own_v4_size();
  for (const auto& msg : this->arr_own_v4_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .benchmark.pb.OwnerV4 vec_own_v4 = 36;
  total_size += 2UL * this->_internal_vec_own_v4_size();
  for (const auto& msg : this->vec_own_v4_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .benchmark.pb.PetType arr_pet_type = 38;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_arr_pet_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_arr_pet_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arr_pet_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .benchmark.pb.PetType vec_pet_type = 39;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_vec_pet_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_vec_pet_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_pet_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string s = 8;
  if (!this->_internal_s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  // bytes arr_u8 = 40;
  if (!this->_internal_arr_u8().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_arr_u8());
  }

  // .benchmark.pb.Owner own = 25;
  if (this->_internal_has_own()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *own_);
  }

  // .benchmark.pb.OwnerV2 own_v2 = 28;
  if (this->_internal_has_own_v2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *own_v2_);
  }

  // .benchmark.pb.OwnerV3 own_v3 = 31;
  if (this->_internal_has_own_v3()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *own_v3_);
  }

  // .benchmark.pb.OwnerV4 own_v4 = 34;
  if (this->_internal_has_own_v4()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *own_v4_);
  }

  // double d = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d = this->_internal_d();
  uint64_t raw_d;
  memcpy(&raw_d, &tmp_d, sizeof(tmp_d));
  if (raw_d != 0) {
    total_size += 1 + 8;
  }

  // float f = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f = this->_internal_f();
  uint32_t raw_f;
  memcpy(&raw_f, &tmp_f, sizeof(tmp_f));
  if (raw_f != 0) {
    total_size += 1 + 4;
  }

  // int32 i32 = 3;
  if (this->_internal_i32() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_i32());
  }

  // int64 i64 = 4;
  if (this->_internal_i64() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_i64());
  }

  // uint64 u64 = 6;
  if (this->_internal_u64() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_u64());
  }

  // uint32 u32 = 5;
  if (this->_internal_u32() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_u32());
  }

  // bool bval = 7;
  if (this->_internal_bval() != 0) {
    total_size += 1 + 1;
  }

  // .benchmark.pb.PetType pet_type = 37;
  if (this->_internal_pet_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pet::GetClassData() const { return &_class_data_; }

void Pet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pet *>(to)->MergeFrom(
      static_cast<const Pet &>(from));
}


void Pet::MergeFrom(const Pet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:benchmark.pb.Pet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  arr_d_.MergeFrom(from.arr_d_);
  arr_f_.MergeFrom(from.arr_f_);
  arr_i32_.MergeFrom(from.arr_i32_);
  arr_i64_.MergeFrom(from.arr_i64_);
  arr_u32_.MergeFrom(from.arr_u32_);
  arr_u64_.MergeFrom(from.arr_u64_);
  arr_bval_.MergeFrom(from.arr_bval_);
  arr_s_.MergeFrom(from.arr_s_);
  vec_d_.MergeFrom(from.vec_d_);
  vec_f_.MergeFrom(from.vec_f_);
  vec_i32_.MergeFrom(from.vec_i32_);
  vec_i64_.MergeFrom(from.vec_i64_);
  vec_u32_.MergeFrom(from.vec_u32_);
  vec_u64_.MergeFrom(from.vec_u64_);
  vec_bval_.MergeFrom(from.vec_bval_);
  vec_s_.MergeFrom(from.vec_s_);
  arr_own_.MergeFrom(from.arr_own_);
  vec_own_.MergeFrom(from.vec_own_);
  arr_own_v2_.MergeFrom(from.arr_own_v2_);
  vec_own_v2_.MergeFrom(from.vec_own_v2_);
  arr_own_v3_.MergeFrom(from.arr_own_v3_);
  vec_own_v3_.MergeFrom(from.vec_own_v3_);
  arr_own_v4_.MergeFrom(from.arr_own_v4_);
  vec_own_v4_.MergeFrom(from.vec_own_v4_);
  arr_pet_type_.MergeFrom(from.arr_pet_type_);
  vec_pet_type_.MergeFrom(from.vec_pet_type_);
  if (!from._internal_s().empty()) {
    _internal_set_s(from._internal_s());
  }
  if (!from._internal_arr_u8().empty()) {
    _internal_set_arr_u8(from._internal_arr_u8());
  }
  if (from._internal_has_own()) {
    _internal_mutable_own()->::benchmark::pb::Owner::MergeFrom(from._internal_own());
  }
  if (from._internal_has_own_v2()) {
    _internal_mutable_own_v2()->::benchmark::pb::OwnerV2::MergeFrom(from._internal_own_v2());
  }
  if (from._internal_has_own_v3()) {
    _internal_mutable_own_v3()->::benchmark::pb::OwnerV3::MergeFrom(from._internal_own_v3());
  }
  if (from._internal_has_own_v4()) {
    _internal_mutable_own_v4()->::benchmark::pb::OwnerV4::MergeFrom(from._internal_own_v4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d = from._internal_d();
  uint64_t raw_d;
  memcpy(&raw_d, &tmp_d, sizeof(tmp_d));
  if (raw_d != 0) {
    _internal_set_d(from._internal_d());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f = from._internal_f();
  uint32_t raw_f;
  memcpy(&raw_f, &tmp_f, sizeof(tmp_f));
  if (raw_f != 0) {
    _internal_set_f(from._internal_f());
  }
  if (from._internal_i32() != 0) {
    _internal_set_i32(from._internal_i32());
  }
  if (from._internal_i64() != 0) {
    _internal_set_i64(from._internal_i64());
  }
  if (from._internal_u64() != 0) {
    _internal_set_u64(from._internal_u64());
  }
  if (from._internal_u32() != 0) {
    _internal_set_u32(from._internal_u32());
  }
  if (from._internal_bval() != 0) {
    _internal_set_bval(from._internal_bval());
  }
  if (from._internal_pet_type() != 0) {
    _internal_set_pet_type(from._internal_pet_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pet::CopyFrom(const Pet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:benchmark.pb.Pet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pet::IsInitialized() const {
  return true;
}

void Pet::InternalSwap(Pet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arr_d_.InternalSwap(&other->arr_d_);
  arr_f_.InternalSwap(&other->arr_f_);
  arr_i32_.InternalSwap(&other->arr_i32_);
  arr_i64_.InternalSwap(&other->arr_i64_);
  arr_u32_.InternalSwap(&other->arr_u32_);
  arr_u64_.InternalSwap(&other->arr_u64_);
  arr_bval_.InternalSwap(&other->arr_bval_);
  arr_s_.InternalSwap(&other->arr_s_);
  vec_d_.InternalSwap(&other->vec_d_);
  vec_f_.InternalSwap(&other->vec_f_);
  vec_i32_.InternalSwap(&other->vec_i32_);
  vec_i64_.InternalSwap(&other->vec_i64_);
  vec_u32_.InternalSwap(&other->vec_u32_);
  vec_u64_.InternalSwap(&other->vec_u64_);
  vec_bval_.InternalSwap(&other->vec_bval_);
  vec_s_.InternalSwap(&other->vec_s_);
  arr_own_.InternalSwap(&other->arr_own_);
  vec_own_.InternalSwap(&other->vec_own_);
  arr_own_v2_.InternalSwap(&other->arr_own_v2_);
  vec_own_v2_.InternalSwap(&other->vec_own_v2_);
  arr_own_v3_.InternalSwap(&other->arr_own_v3_);
  vec_own_v3_.InternalSwap(&other->vec_own_v3_);
  arr_own_v4_.InternalSwap(&other->arr_own_v4_);
  vec_own_v4_.InternalSwap(&other->vec_own_v4_);
  arr_pet_type_.InternalSwap(&other->arr_pet_type_);
  vec_pet_type_.InternalSwap(&other->vec_pet_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_, lhs_arena,
      &other->s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &arr_u8_, lhs_arena,
      &other->arr_u8_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pet, pet_type_)
      + sizeof(Pet::pet_type_)
      - PROTOBUF_FIELD_OFFSET(Pet, own_)>(
          reinterpret_cast<char*>(&own_),
          reinterpret_cast<char*>(&other->own_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pet_2eproto_getter, &descriptor_table_pet_2eproto_once,
      file_level_metadata_pet_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace benchmark
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::benchmark::pb::Owner* Arena::CreateMaybeMessage< ::benchmark::pb::Owner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::benchmark::pb::Owner >(arena);
}
template<> PROTOBUF_NOINLINE ::benchmark::pb::OwnerV2* Arena::CreateMaybeMessage< ::benchmark::pb::OwnerV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::benchmark::pb::OwnerV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::benchmark::pb::OwnerV3* Arena::CreateMaybeMessage< ::benchmark::pb::OwnerV3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::benchmark::pb::OwnerV3 >(arena);
}
template<> PROTOBUF_NOINLINE ::benchmark::pb::OwnerV4* Arena::CreateMaybeMessage< ::benchmark::pb::OwnerV4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::benchmark::pb::OwnerV4 >(arena);
}
template<> PROTOBUF_NOINLINE ::benchmark::pb::Pet* Arena::CreateMaybeMessage< ::benchmark::pb::Pet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::benchmark::pb::Pet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
