// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pet_2eproto;
namespace benchmark {
namespace pb {
class Owner;
struct OwnerDefaultTypeInternal;
extern OwnerDefaultTypeInternal _Owner_default_instance_;
class OwnerV2;
struct OwnerV2DefaultTypeInternal;
extern OwnerV2DefaultTypeInternal _OwnerV2_default_instance_;
class OwnerV3;
struct OwnerV3DefaultTypeInternal;
extern OwnerV3DefaultTypeInternal _OwnerV3_default_instance_;
class OwnerV4;
struct OwnerV4DefaultTypeInternal;
extern OwnerV4DefaultTypeInternal _OwnerV4_default_instance_;
class Pet;
struct PetDefaultTypeInternal;
extern PetDefaultTypeInternal _Pet_default_instance_;
}  // namespace pb
}  // namespace benchmark
PROTOBUF_NAMESPACE_OPEN
template<> ::benchmark::pb::Owner* Arena::CreateMaybeMessage<::benchmark::pb::Owner>(Arena*);
template<> ::benchmark::pb::OwnerV2* Arena::CreateMaybeMessage<::benchmark::pb::OwnerV2>(Arena*);
template<> ::benchmark::pb::OwnerV3* Arena::CreateMaybeMessage<::benchmark::pb::OwnerV3>(Arena*);
template<> ::benchmark::pb::OwnerV4* Arena::CreateMaybeMessage<::benchmark::pb::OwnerV4>(Arena*);
template<> ::benchmark::pb::Pet* Arena::CreateMaybeMessage<::benchmark::pb::Pet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace benchmark {
namespace pb {

enum PetType : int {
  DOG = 0,
  CAT = 1,
  BIRD = 2,
  FISH = 3,
  HAMSTER = 4,
  RABBIT = 5,
  SNAKE = 6,
  LIZARD = 7,
  FERRET = 8,
  GUINEA_PIG = 9,
  PetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PetType_IsValid(int value);
constexpr PetType PetType_MIN = DOG;
constexpr PetType PetType_MAX = GUINEA_PIG;
constexpr int PetType_ARRAYSIZE = PetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PetType_descriptor();
template<typename T>
inline const std::string& PetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PetType_descriptor(), enum_t_value);
}
inline bool PetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PetType>(
    PetType_descriptor(), name, value);
}
// ===================================================================

class Owner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchmark.pb.Owner) */ {
 public:
  inline Owner() : Owner(nullptr) {}
  ~Owner() override;
  explicit constexpr Owner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Owner(const Owner& from);
  Owner(Owner&& from) noexcept
    : Owner() {
    *this = ::std::move(from);
  }

  inline Owner& operator=(const Owner& from) {
    CopyFrom(from);
    return *this;
  }
  inline Owner& operator=(Owner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Owner& default_instance() {
    return *internal_default_instance();
  }
  static inline const Owner* internal_default_instance() {
    return reinterpret_cast<const Owner*>(
               &_Owner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Owner& a, Owner& b) {
    a.Swap(&b);
  }
  inline void Swap(Owner* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Owner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Owner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Owner>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Owner& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Owner& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Owner* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchmark.pb.Owner";
  }
  protected:
  explicit Owner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 2;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:benchmark.pb.Owner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2eproto;
};
// -------------------------------------------------------------------

class OwnerV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchmark.pb.OwnerV2) */ {
 public:
  inline OwnerV2() : OwnerV2(nullptr) {}
  ~OwnerV2() override;
  explicit constexpr OwnerV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OwnerV2(const OwnerV2& from);
  OwnerV2(OwnerV2&& from) noexcept
    : OwnerV2() {
    *this = ::std::move(from);
  }

  inline OwnerV2& operator=(const OwnerV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnerV2& operator=(OwnerV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OwnerV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const OwnerV2* internal_default_instance() {
    return reinterpret_cast<const OwnerV2*>(
               &_OwnerV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OwnerV2& a, OwnerV2& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnerV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnerV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OwnerV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OwnerV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OwnerV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OwnerV2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnerV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchmark.pb.OwnerV2";
  }
  protected:
  explicit OwnerV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 2;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:benchmark.pb.OwnerV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2eproto;
};
// -------------------------------------------------------------------

class OwnerV3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchmark.pb.OwnerV3) */ {
 public:
  inline OwnerV3() : OwnerV3(nullptr) {}
  ~OwnerV3() override;
  explicit constexpr OwnerV3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OwnerV3(const OwnerV3& from);
  OwnerV3(OwnerV3&& from) noexcept
    : OwnerV3() {
    *this = ::std::move(from);
  }

  inline OwnerV3& operator=(const OwnerV3& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnerV3& operator=(OwnerV3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OwnerV3& default_instance() {
    return *internal_default_instance();
  }
  static inline const OwnerV3* internal_default_instance() {
    return reinterpret_cast<const OwnerV3*>(
               &_OwnerV3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OwnerV3& a, OwnerV3& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnerV3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnerV3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OwnerV3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OwnerV3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OwnerV3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OwnerV3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnerV3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchmark.pb.OwnerV3";
  }
  protected:
  explicit OwnerV3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 2;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:benchmark.pb.OwnerV3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2eproto;
};
// -------------------------------------------------------------------

class OwnerV4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchmark.pb.OwnerV4) */ {
 public:
  inline OwnerV4() : OwnerV4(nullptr) {}
  ~OwnerV4() override;
  explicit constexpr OwnerV4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OwnerV4(const OwnerV4& from);
  OwnerV4(OwnerV4&& from) noexcept
    : OwnerV4() {
    *this = ::std::move(from);
  }

  inline OwnerV4& operator=(const OwnerV4& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnerV4& operator=(OwnerV4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OwnerV4& default_instance() {
    return *internal_default_instance();
  }
  static inline const OwnerV4* internal_default_instance() {
    return reinterpret_cast<const OwnerV4*>(
               &_OwnerV4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OwnerV4& a, OwnerV4& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnerV4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnerV4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OwnerV4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OwnerV4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OwnerV4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OwnerV4& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnerV4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchmark.pb.OwnerV4";
  }
  protected:
  explicit OwnerV4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 2;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:benchmark.pb.OwnerV4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2eproto;
};
// -------------------------------------------------------------------

class Pet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchmark.pb.Pet) */ {
 public:
  inline Pet() : Pet(nullptr) {}
  ~Pet() override;
  explicit constexpr Pet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pet(const Pet& from);
  Pet(Pet&& from) noexcept
    : Pet() {
    *this = ::std::move(from);
  }

  inline Pet& operator=(const Pet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pet& operator=(Pet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pet* internal_default_instance() {
    return reinterpret_cast<const Pet*>(
               &_Pet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Pet& a, Pet& b) {
    a.Swap(&b);
  }
  inline void Swap(Pet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchmark.pb.Pet";
  }
  protected:
  explicit Pet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrDFieldNumber = 9,
    kArrFFieldNumber = 10,
    kArrI32FieldNumber = 11,
    kArrI64FieldNumber = 12,
    kArrU32FieldNumber = 13,
    kArrU64FieldNumber = 14,
    kArrBvalFieldNumber = 15,
    kArrSFieldNumber = 16,
    kVecDFieldNumber = 17,
    kVecFFieldNumber = 18,
    kVecI32FieldNumber = 19,
    kVecI64FieldNumber = 20,
    kVecU32FieldNumber = 21,
    kVecU64FieldNumber = 22,
    kVecBvalFieldNumber = 23,
    kVecSFieldNumber = 24,
    kArrOwnFieldNumber = 26,
    kVecOwnFieldNumber = 27,
    kArrOwnV2FieldNumber = 29,
    kVecOwnV2FieldNumber = 30,
    kArrOwnV3FieldNumber = 32,
    kVecOwnV3FieldNumber = 33,
    kArrOwnV4FieldNumber = 35,
    kVecOwnV4FieldNumber = 36,
    kArrPetTypeFieldNumber = 38,
    kVecPetTypeFieldNumber = 39,
    kSFieldNumber = 8,
    kArrU8FieldNumber = 40,
    kOwnFieldNumber = 25,
    kOwnV2FieldNumber = 28,
    kOwnV3FieldNumber = 31,
    kOwnV4FieldNumber = 34,
    kDFieldNumber = 1,
    kFFieldNumber = 2,
    kI32FieldNumber = 3,
    kI64FieldNumber = 4,
    kU64FieldNumber = 6,
    kU32FieldNumber = 5,
    kBvalFieldNumber = 7,
    kPetTypeFieldNumber = 37,
  };
  // repeated double arr_d = 9;
  int arr_d_size() const;
  private:
  int _internal_arr_d_size() const;
  public:
  void clear_arr_d();
  private:
  double _internal_arr_d(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_arr_d() const;
  void _internal_add_arr_d(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_arr_d();
  public:
  double arr_d(int index) const;
  void set_arr_d(int index, double value);
  void add_arr_d(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      arr_d() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_arr_d();

  // repeated float arr_f = 10;
  int arr_f_size() const;
  private:
  int _internal_arr_f_size() const;
  public:
  void clear_arr_f();
  private:
  float _internal_arr_f(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arr_f() const;
  void _internal_add_arr_f(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arr_f();
  public:
  float arr_f(int index) const;
  void set_arr_f(int index, float value);
  void add_arr_f(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arr_f() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arr_f();

  // repeated int32 arr_i32 = 11;
  int arr_i32_size() const;
  private:
  int _internal_arr_i32_size() const;
  public:
  void clear_arr_i32();
  private:
  int32_t _internal_arr_i32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_arr_i32() const;
  void _internal_add_arr_i32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_arr_i32();
  public:
  int32_t arr_i32(int index) const;
  void set_arr_i32(int index, int32_t value);
  void add_arr_i32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      arr_i32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_arr_i32();

  // repeated int64 arr_i64 = 12;
  int arr_i64_size() const;
  private:
  int _internal_arr_i64_size() const;
  public:
  void clear_arr_i64();
  private:
  int64_t _internal_arr_i64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_arr_i64() const;
  void _internal_add_arr_i64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_arr_i64();
  public:
  int64_t arr_i64(int index) const;
  void set_arr_i64(int index, int64_t value);
  void add_arr_i64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      arr_i64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_arr_i64();

  // repeated uint32 arr_u32 = 13;
  int arr_u32_size() const;
  private:
  int _internal_arr_u32_size() const;
  public:
  void clear_arr_u32();
  private:
  uint32_t _internal_arr_u32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_arr_u32() const;
  void _internal_add_arr_u32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_arr_u32();
  public:
  uint32_t arr_u32(int index) const;
  void set_arr_u32(int index, uint32_t value);
  void add_arr_u32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      arr_u32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_arr_u32();

  // repeated uint64 arr_u64 = 14;
  int arr_u64_size() const;
  private:
  int _internal_arr_u64_size() const;
  public:
  void clear_arr_u64();
  private:
  uint64_t _internal_arr_u64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_arr_u64() const;
  void _internal_add_arr_u64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_arr_u64();
  public:
  uint64_t arr_u64(int index) const;
  void set_arr_u64(int index, uint64_t value);
  void add_arr_u64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      arr_u64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_arr_u64();

  // repeated bool arr_bval = 15;
  int arr_bval_size() const;
  private:
  int _internal_arr_bval_size() const;
  public:
  void clear_arr_bval();
  private:
  bool _internal_arr_bval(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_arr_bval() const;
  void _internal_add_arr_bval(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_arr_bval();
  public:
  bool arr_bval(int index) const;
  void set_arr_bval(int index, bool value);
  void add_arr_bval(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      arr_bval() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_arr_bval();

  // repeated string arr_s = 16;
  int arr_s_size() const;
  private:
  int _internal_arr_s_size() const;
  public:
  void clear_arr_s();
  const std::string& arr_s(int index) const;
  std::string* mutable_arr_s(int index);
  void set_arr_s(int index, const std::string& value);
  void set_arr_s(int index, std::string&& value);
  void set_arr_s(int index, const char* value);
  void set_arr_s(int index, const char* value, size_t size);
  std::string* add_arr_s();
  void add_arr_s(const std::string& value);
  void add_arr_s(std::string&& value);
  void add_arr_s(const char* value);
  void add_arr_s(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& arr_s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_arr_s();
  private:
  const std::string& _internal_arr_s(int index) const;
  std::string* _internal_add_arr_s();
  public:

  // repeated double vec_d = 17;
  int vec_d_size() const;
  private:
  int _internal_vec_d_size() const;
  public:
  void clear_vec_d();
  private:
  double _internal_vec_d(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_vec_d() const;
  void _internal_add_vec_d(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_vec_d();
  public:
  double vec_d(int index) const;
  void set_vec_d(int index, double value);
  void add_vec_d(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      vec_d() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_vec_d();

  // repeated float vec_f = 18;
  int vec_f_size() const;
  private:
  int _internal_vec_f_size() const;
  public:
  void clear_vec_f();
  private:
  float _internal_vec_f(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vec_f() const;
  void _internal_add_vec_f(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vec_f();
  public:
  float vec_f(int index) const;
  void set_vec_f(int index, float value);
  void add_vec_f(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vec_f() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vec_f();

  // repeated int32 vec_i32 = 19;
  int vec_i32_size() const;
  private:
  int _internal_vec_i32_size() const;
  public:
  void clear_vec_i32();
  private:
  int32_t _internal_vec_i32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_vec_i32() const;
  void _internal_add_vec_i32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_vec_i32();
  public:
  int32_t vec_i32(int index) const;
  void set_vec_i32(int index, int32_t value);
  void add_vec_i32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      vec_i32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_vec_i32();

  // repeated int64 vec_i64 = 20;
  int vec_i64_size() const;
  private:
  int _internal_vec_i64_size() const;
  public:
  void clear_vec_i64();
  private:
  int64_t _internal_vec_i64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_vec_i64() const;
  void _internal_add_vec_i64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_vec_i64();
  public:
  int64_t vec_i64(int index) const;
  void set_vec_i64(int index, int64_t value);
  void add_vec_i64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      vec_i64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_vec_i64();

  // repeated uint32 vec_u32 = 21;
  int vec_u32_size() const;
  private:
  int _internal_vec_u32_size() const;
  public:
  void clear_vec_u32();
  private:
  uint32_t _internal_vec_u32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_vec_u32() const;
  void _internal_add_vec_u32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_vec_u32();
  public:
  uint32_t vec_u32(int index) const;
  void set_vec_u32(int index, uint32_t value);
  void add_vec_u32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      vec_u32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_vec_u32();

  // repeated uint64 vec_u64 = 22;
  int vec_u64_size() const;
  private:
  int _internal_vec_u64_size() const;
  public:
  void clear_vec_u64();
  private:
  uint64_t _internal_vec_u64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_vec_u64() const;
  void _internal_add_vec_u64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_vec_u64();
  public:
  uint64_t vec_u64(int index) const;
  void set_vec_u64(int index, uint64_t value);
  void add_vec_u64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      vec_u64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_vec_u64();

  // repeated bool vec_bval = 23;
  int vec_bval_size() const;
  private:
  int _internal_vec_bval_size() const;
  public:
  void clear_vec_bval();
  private:
  bool _internal_vec_bval(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_vec_bval() const;
  void _internal_add_vec_bval(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_vec_bval();
  public:
  bool vec_bval(int index) const;
  void set_vec_bval(int index, bool value);
  void add_vec_bval(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      vec_bval() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_vec_bval();

  // repeated string vec_s = 24;
  int vec_s_size() const;
  private:
  int _internal_vec_s_size() const;
  public:
  void clear_vec_s();
  const std::string& vec_s(int index) const;
  std::string* mutable_vec_s(int index);
  void set_vec_s(int index, const std::string& value);
  void set_vec_s(int index, std::string&& value);
  void set_vec_s(int index, const char* value);
  void set_vec_s(int index, const char* value, size_t size);
  std::string* add_vec_s();
  void add_vec_s(const std::string& value);
  void add_vec_s(std::string&& value);
  void add_vec_s(const char* value);
  void add_vec_s(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vec_s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vec_s();
  private:
  const std::string& _internal_vec_s(int index) const;
  std::string* _internal_add_vec_s();
  public:

  // repeated .benchmark.pb.Owner arr_own = 26;
  int arr_own_size() const;
  private:
  int _internal_arr_own_size() const;
  public:
  void clear_arr_own();
  ::benchmark::pb::Owner* mutable_arr_own(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::Owner >*
      mutable_arr_own();
  private:
  const ::benchmark::pb::Owner& _internal_arr_own(int index) const;
  ::benchmark::pb::Owner* _internal_add_arr_own();
  public:
  const ::benchmark::pb::Owner& arr_own(int index) const;
  ::benchmark::pb::Owner* add_arr_own();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::Owner >&
      arr_own() const;

  // repeated .benchmark.pb.Owner vec_own = 27;
  int vec_own_size() const;
  private:
  int _internal_vec_own_size() const;
  public:
  void clear_vec_own();
  ::benchmark::pb::Owner* mutable_vec_own(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::Owner >*
      mutable_vec_own();
  private:
  const ::benchmark::pb::Owner& _internal_vec_own(int index) const;
  ::benchmark::pb::Owner* _internal_add_vec_own();
  public:
  const ::benchmark::pb::Owner& vec_own(int index) const;
  ::benchmark::pb::Owner* add_vec_own();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::Owner >&
      vec_own() const;

  // repeated .benchmark.pb.OwnerV2 arr_own_v2 = 29;
  int arr_own_v2_size() const;
  private:
  int _internal_arr_own_v2_size() const;
  public:
  void clear_arr_own_v2();
  ::benchmark::pb::OwnerV2* mutable_arr_own_v2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV2 >*
      mutable_arr_own_v2();
  private:
  const ::benchmark::pb::OwnerV2& _internal_arr_own_v2(int index) const;
  ::benchmark::pb::OwnerV2* _internal_add_arr_own_v2();
  public:
  const ::benchmark::pb::OwnerV2& arr_own_v2(int index) const;
  ::benchmark::pb::OwnerV2* add_arr_own_v2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV2 >&
      arr_own_v2() const;

  // repeated .benchmark.pb.OwnerV2 vec_own_v2 = 30;
  int vec_own_v2_size() const;
  private:
  int _internal_vec_own_v2_size() const;
  public:
  void clear_vec_own_v2();
  ::benchmark::pb::OwnerV2* mutable_vec_own_v2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV2 >*
      mutable_vec_own_v2();
  private:
  const ::benchmark::pb::OwnerV2& _internal_vec_own_v2(int index) const;
  ::benchmark::pb::OwnerV2* _internal_add_vec_own_v2();
  public:
  const ::benchmark::pb::OwnerV2& vec_own_v2(int index) const;
  ::benchmark::pb::OwnerV2* add_vec_own_v2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV2 >&
      vec_own_v2() const;

  // repeated .benchmark.pb.OwnerV3 arr_own_v3 = 32;
  int arr_own_v3_size() const;
  private:
  int _internal_arr_own_v3_size() const;
  public:
  void clear_arr_own_v3();
  ::benchmark::pb::OwnerV3* mutable_arr_own_v3(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV3 >*
      mutable_arr_own_v3();
  private:
  const ::benchmark::pb::OwnerV3& _internal_arr_own_v3(int index) const;
  ::benchmark::pb::OwnerV3* _internal_add_arr_own_v3();
  public:
  const ::benchmark::pb::OwnerV3& arr_own_v3(int index) const;
  ::benchmark::pb::OwnerV3* add_arr_own_v3();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV3 >&
      arr_own_v3() const;

  // repeated .benchmark.pb.OwnerV3 vec_own_v3 = 33;
  int vec_own_v3_size() const;
  private:
  int _internal_vec_own_v3_size() const;
  public:
  void clear_vec_own_v3();
  ::benchmark::pb::OwnerV3* mutable_vec_own_v3(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV3 >*
      mutable_vec_own_v3();
  private:
  const ::benchmark::pb::OwnerV3& _internal_vec_own_v3(int index) const;
  ::benchmark::pb::OwnerV3* _internal_add_vec_own_v3();
  public:
  const ::benchmark::pb::OwnerV3& vec_own_v3(int index) const;
  ::benchmark::pb::OwnerV3* add_vec_own_v3();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV3 >&
      vec_own_v3() const;

  // repeated .benchmark.pb.OwnerV4 arr_own_v4 = 35;
  int arr_own_v4_size() const;
  private:
  int _internal_arr_own_v4_size() const;
  public:
  void clear_arr_own_v4();
  ::benchmark::pb::OwnerV4* mutable_arr_own_v4(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV4 >*
      mutable_arr_own_v4();
  private:
  const ::benchmark::pb::OwnerV4& _internal_arr_own_v4(int index) const;
  ::benchmark::pb::OwnerV4* _internal_add_arr_own_v4();
  public:
  const ::benchmark::pb::OwnerV4& arr_own_v4(int index) const;
  ::benchmark::pb::OwnerV4* add_arr_own_v4();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV4 >&
      arr_own_v4() const;

  // repeated .benchmark.pb.OwnerV4 vec_own_v4 = 36;
  int vec_own_v4_size() const;
  private:
  int _internal_vec_own_v4_size() const;
  public:
  void clear_vec_own_v4();
  ::benchmark::pb::OwnerV4* mutable_vec_own_v4(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV4 >*
      mutable_vec_own_v4();
  private:
  const ::benchmark::pb::OwnerV4& _internal_vec_own_v4(int index) const;
  ::benchmark::pb::OwnerV4* _internal_add_vec_own_v4();
  public:
  const ::benchmark::pb::OwnerV4& vec_own_v4(int index) const;
  ::benchmark::pb::OwnerV4* add_vec_own_v4();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV4 >&
      vec_own_v4() const;

  // repeated .benchmark.pb.PetType arr_pet_type = 38;
  int arr_pet_type_size() const;
  private:
  int _internal_arr_pet_type_size() const;
  public:
  void clear_arr_pet_type();
  private:
  ::benchmark::pb::PetType _internal_arr_pet_type(int index) const;
  void _internal_add_arr_pet_type(::benchmark::pb::PetType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_arr_pet_type();
  public:
  ::benchmark::pb::PetType arr_pet_type(int index) const;
  void set_arr_pet_type(int index, ::benchmark::pb::PetType value);
  void add_arr_pet_type(::benchmark::pb::PetType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& arr_pet_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_arr_pet_type();

  // repeated .benchmark.pb.PetType vec_pet_type = 39;
  int vec_pet_type_size() const;
  private:
  int _internal_vec_pet_type_size() const;
  public:
  void clear_vec_pet_type();
  private:
  ::benchmark::pb::PetType _internal_vec_pet_type(int index) const;
  void _internal_add_vec_pet_type(::benchmark::pb::PetType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_vec_pet_type();
  public:
  ::benchmark::pb::PetType vec_pet_type(int index) const;
  void set_vec_pet_type(int index, ::benchmark::pb::PetType value);
  void add_vec_pet_type(::benchmark::pb::PetType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& vec_pet_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_vec_pet_type();

  // string s = 8;
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // bytes arr_u8 = 40;
  void clear_arr_u8();
  const std::string& arr_u8() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_arr_u8(ArgT0&& arg0, ArgT... args);
  std::string* mutable_arr_u8();
  PROTOBUF_NODISCARD std::string* release_arr_u8();
  void set_allocated_arr_u8(std::string* arr_u8);
  private:
  const std::string& _internal_arr_u8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_arr_u8(const std::string& value);
  std::string* _internal_mutable_arr_u8();
  public:

  // .benchmark.pb.Owner own = 25;
  bool has_own() const;
  private:
  bool _internal_has_own() const;
  public:
  void clear_own();
  const ::benchmark::pb::Owner& own() const;
  PROTOBUF_NODISCARD ::benchmark::pb::Owner* release_own();
  ::benchmark::pb::Owner* mutable_own();
  void set_allocated_own(::benchmark::pb::Owner* own);
  private:
  const ::benchmark::pb::Owner& _internal_own() const;
  ::benchmark::pb::Owner* _internal_mutable_own();
  public:
  void unsafe_arena_set_allocated_own(
      ::benchmark::pb::Owner* own);
  ::benchmark::pb::Owner* unsafe_arena_release_own();

  // .benchmark.pb.OwnerV2 own_v2 = 28;
  bool has_own_v2() const;
  private:
  bool _internal_has_own_v2() const;
  public:
  void clear_own_v2();
  const ::benchmark::pb::OwnerV2& own_v2() const;
  PROTOBUF_NODISCARD ::benchmark::pb::OwnerV2* release_own_v2();
  ::benchmark::pb::OwnerV2* mutable_own_v2();
  void set_allocated_own_v2(::benchmark::pb::OwnerV2* own_v2);
  private:
  const ::benchmark::pb::OwnerV2& _internal_own_v2() const;
  ::benchmark::pb::OwnerV2* _internal_mutable_own_v2();
  public:
  void unsafe_arena_set_allocated_own_v2(
      ::benchmark::pb::OwnerV2* own_v2);
  ::benchmark::pb::OwnerV2* unsafe_arena_release_own_v2();

  // .benchmark.pb.OwnerV3 own_v3 = 31;
  bool has_own_v3() const;
  private:
  bool _internal_has_own_v3() const;
  public:
  void clear_own_v3();
  const ::benchmark::pb::OwnerV3& own_v3() const;
  PROTOBUF_NODISCARD ::benchmark::pb::OwnerV3* release_own_v3();
  ::benchmark::pb::OwnerV3* mutable_own_v3();
  void set_allocated_own_v3(::benchmark::pb::OwnerV3* own_v3);
  private:
  const ::benchmark::pb::OwnerV3& _internal_own_v3() const;
  ::benchmark::pb::OwnerV3* _internal_mutable_own_v3();
  public:
  void unsafe_arena_set_allocated_own_v3(
      ::benchmark::pb::OwnerV3* own_v3);
  ::benchmark::pb::OwnerV3* unsafe_arena_release_own_v3();

  // .benchmark.pb.OwnerV4 own_v4 = 34;
  bool has_own_v4() const;
  private:
  bool _internal_has_own_v4() const;
  public:
  void clear_own_v4();
  const ::benchmark::pb::OwnerV4& own_v4() const;
  PROTOBUF_NODISCARD ::benchmark::pb::OwnerV4* release_own_v4();
  ::benchmark::pb::OwnerV4* mutable_own_v4();
  void set_allocated_own_v4(::benchmark::pb::OwnerV4* own_v4);
  private:
  const ::benchmark::pb::OwnerV4& _internal_own_v4() const;
  ::benchmark::pb::OwnerV4* _internal_mutable_own_v4();
  public:
  void unsafe_arena_set_allocated_own_v4(
      ::benchmark::pb::OwnerV4* own_v4);
  ::benchmark::pb::OwnerV4* unsafe_arena_release_own_v4();

  // double d = 1;
  void clear_d();
  double d() const;
  void set_d(double value);
  private:
  double _internal_d() const;
  void _internal_set_d(double value);
  public:

  // float f = 2;
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // int32 i32 = 3;
  void clear_i32();
  int32_t i32() const;
  void set_i32(int32_t value);
  private:
  int32_t _internal_i32() const;
  void _internal_set_i32(int32_t value);
  public:

  // int64 i64 = 4;
  void clear_i64();
  int64_t i64() const;
  void set_i64(int64_t value);
  private:
  int64_t _internal_i64() const;
  void _internal_set_i64(int64_t value);
  public:

  // uint64 u64 = 6;
  void clear_u64();
  uint64_t u64() const;
  void set_u64(uint64_t value);
  private:
  uint64_t _internal_u64() const;
  void _internal_set_u64(uint64_t value);
  public:

  // uint32 u32 = 5;
  void clear_u32();
  uint32_t u32() const;
  void set_u32(uint32_t value);
  private:
  uint32_t _internal_u32() const;
  void _internal_set_u32(uint32_t value);
  public:

  // bool bval = 7;
  void clear_bval();
  bool bval() const;
  void set_bval(bool value);
  private:
  bool _internal_bval() const;
  void _internal_set_bval(bool value);
  public:

  // .benchmark.pb.PetType pet_type = 37;
  void clear_pet_type();
  ::benchmark::pb::PetType pet_type() const;
  void set_pet_type(::benchmark::pb::PetType value);
  private:
  ::benchmark::pb::PetType _internal_pet_type() const;
  void _internal_set_pet_type(::benchmark::pb::PetType value);
  public:

  // @@protoc_insertion_point(class_scope:benchmark.pb.Pet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > arr_d_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arr_f_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > arr_i32_;
  mutable std::atomic<int> _arr_i32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > arr_i64_;
  mutable std::atomic<int> _arr_i64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > arr_u32_;
  mutable std::atomic<int> _arr_u32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > arr_u64_;
  mutable std::atomic<int> _arr_u64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > arr_bval_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> arr_s_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > vec_d_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vec_f_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > vec_i32_;
  mutable std::atomic<int> _vec_i32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > vec_i64_;
  mutable std::atomic<int> _vec_i64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > vec_u32_;
  mutable std::atomic<int> _vec_u32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > vec_u64_;
  mutable std::atomic<int> _vec_u64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > vec_bval_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vec_s_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::Owner > arr_own_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::Owner > vec_own_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV2 > arr_own_v2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV2 > vec_own_v2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV3 > arr_own_v3_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV3 > vec_own_v3_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV4 > arr_own_v4_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV4 > vec_own_v4_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> arr_pet_type_;
  mutable std::atomic<int> _arr_pet_type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> vec_pet_type_;
  mutable std::atomic<int> _vec_pet_type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arr_u8_;
  ::benchmark::pb::Owner* own_;
  ::benchmark::pb::OwnerV2* own_v2_;
  ::benchmark::pb::OwnerV3* own_v3_;
  ::benchmark::pb::OwnerV4* own_v4_;
  double d_;
  float f_;
  int32_t i32_;
  int64_t i64_;
  uint64_t u64_;
  uint32_t u32_;
  bool bval_;
  int pet_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Owner

// string name = 1;
inline void Owner::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Owner::name() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Owner.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Owner::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.pb.Owner.name)
}
inline std::string* Owner::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Owner.name)
  return _s;
}
inline const std::string& Owner::_internal_name() const {
  return name_.Get();
}
inline void Owner::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Owner::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Owner::release_name() {
  // @@protoc_insertion_point(field_release:benchmark.pb.Owner.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Owner::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.pb.Owner.name)
}

// int32 age = 2;
inline void Owner::clear_age() {
  age_ = 0;
}
inline int32_t Owner::_internal_age() const {
  return age_;
}
inline int32_t Owner::age() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Owner.age)
  return _internal_age();
}
inline void Owner::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void Owner::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Owner.age)
}

// -------------------------------------------------------------------

// OwnerV2

// string name = 1;
inline void OwnerV2::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OwnerV2::name() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.OwnerV2.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OwnerV2::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.pb.OwnerV2.name)
}
inline std::string* OwnerV2::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:benchmark.pb.OwnerV2.name)
  return _s;
}
inline const std::string& OwnerV2::_internal_name() const {
  return name_.Get();
}
inline void OwnerV2::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OwnerV2::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OwnerV2::release_name() {
  // @@protoc_insertion_point(field_release:benchmark.pb.OwnerV2.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OwnerV2::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.pb.OwnerV2.name)
}

// int32 age = 2;
inline void OwnerV2::clear_age() {
  age_ = 0;
}
inline int32_t OwnerV2::_internal_age() const {
  return age_;
}
inline int32_t OwnerV2::age() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.OwnerV2.age)
  return _internal_age();
}
inline void OwnerV2::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void OwnerV2::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.OwnerV2.age)
}

// -------------------------------------------------------------------

// OwnerV3

// string name = 1;
inline void OwnerV3::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OwnerV3::name() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.OwnerV3.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OwnerV3::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.pb.OwnerV3.name)
}
inline std::string* OwnerV3::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:benchmark.pb.OwnerV3.name)
  return _s;
}
inline const std::string& OwnerV3::_internal_name() const {
  return name_.Get();
}
inline void OwnerV3::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OwnerV3::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OwnerV3::release_name() {
  // @@protoc_insertion_point(field_release:benchmark.pb.OwnerV3.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OwnerV3::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.pb.OwnerV3.name)
}

// int32 age = 2;
inline void OwnerV3::clear_age() {
  age_ = 0;
}
inline int32_t OwnerV3::_internal_age() const {
  return age_;
}
inline int32_t OwnerV3::age() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.OwnerV3.age)
  return _internal_age();
}
inline void OwnerV3::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void OwnerV3::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.OwnerV3.age)
}

// -------------------------------------------------------------------

// OwnerV4

// string name = 1;
inline void OwnerV4::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OwnerV4::name() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.OwnerV4.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OwnerV4::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.pb.OwnerV4.name)
}
inline std::string* OwnerV4::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:benchmark.pb.OwnerV4.name)
  return _s;
}
inline const std::string& OwnerV4::_internal_name() const {
  return name_.Get();
}
inline void OwnerV4::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OwnerV4::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OwnerV4::release_name() {
  // @@protoc_insertion_point(field_release:benchmark.pb.OwnerV4.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OwnerV4::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.pb.OwnerV4.name)
}

// int32 age = 2;
inline void OwnerV4::clear_age() {
  age_ = 0;
}
inline int32_t OwnerV4::_internal_age() const {
  return age_;
}
inline int32_t OwnerV4::age() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.OwnerV4.age)
  return _internal_age();
}
inline void OwnerV4::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void OwnerV4::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.OwnerV4.age)
}

// -------------------------------------------------------------------

// Pet

// double d = 1;
inline void Pet::clear_d() {
  d_ = 0;
}
inline double Pet::_internal_d() const {
  return d_;
}
inline double Pet::d() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.d)
  return _internal_d();
}
inline void Pet::_internal_set_d(double value) {
  
  d_ = value;
}
inline void Pet::set_d(double value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.d)
}

// float f = 2;
inline void Pet::clear_f() {
  f_ = 0;
}
inline float Pet::_internal_f() const {
  return f_;
}
inline float Pet::f() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.f)
  return _internal_f();
}
inline void Pet::_internal_set_f(float value) {
  
  f_ = value;
}
inline void Pet::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.f)
}

// int32 i32 = 3;
inline void Pet::clear_i32() {
  i32_ = 0;
}
inline int32_t Pet::_internal_i32() const {
  return i32_;
}
inline int32_t Pet::i32() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.i32)
  return _internal_i32();
}
inline void Pet::_internal_set_i32(int32_t value) {
  
  i32_ = value;
}
inline void Pet::set_i32(int32_t value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.i32)
}

// int64 i64 = 4;
inline void Pet::clear_i64() {
  i64_ = int64_t{0};
}
inline int64_t Pet::_internal_i64() const {
  return i64_;
}
inline int64_t Pet::i64() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.i64)
  return _internal_i64();
}
inline void Pet::_internal_set_i64(int64_t value) {
  
  i64_ = value;
}
inline void Pet::set_i64(int64_t value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.i64)
}

// uint32 u32 = 5;
inline void Pet::clear_u32() {
  u32_ = 0u;
}
inline uint32_t Pet::_internal_u32() const {
  return u32_;
}
inline uint32_t Pet::u32() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.u32)
  return _internal_u32();
}
inline void Pet::_internal_set_u32(uint32_t value) {
  
  u32_ = value;
}
inline void Pet::set_u32(uint32_t value) {
  _internal_set_u32(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.u32)
}

// uint64 u64 = 6;
inline void Pet::clear_u64() {
  u64_ = uint64_t{0u};
}
inline uint64_t Pet::_internal_u64() const {
  return u64_;
}
inline uint64_t Pet::u64() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.u64)
  return _internal_u64();
}
inline void Pet::_internal_set_u64(uint64_t value) {
  
  u64_ = value;
}
inline void Pet::set_u64(uint64_t value) {
  _internal_set_u64(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.u64)
}

// bool bval = 7;
inline void Pet::clear_bval() {
  bval_ = false;
}
inline bool Pet::_internal_bval() const {
  return bval_;
}
inline bool Pet::bval() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.bval)
  return _internal_bval();
}
inline void Pet::_internal_set_bval(bool value) {
  
  bval_ = value;
}
inline void Pet::set_bval(bool value) {
  _internal_set_bval(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.bval)
}

// string s = 8;
inline void Pet::clear_s() {
  s_.ClearToEmpty();
}
inline const std::string& Pet::s() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pet::set_s(ArgT0&& arg0, ArgT... args) {
 
 s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.s)
}
inline std::string* Pet::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.s)
  return _s;
}
inline const std::string& Pet::_internal_s() const {
  return s_.Get();
}
inline void Pet::_internal_set_s(const std::string& value) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pet::_internal_mutable_s() {
  
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pet::release_s() {
  // @@protoc_insertion_point(field_release:benchmark.pb.Pet.s)
  return s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pet::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (s_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.pb.Pet.s)
}

// repeated double arr_d = 9;
inline int Pet::_internal_arr_d_size() const {
  return arr_d_.size();
}
inline int Pet::arr_d_size() const {
  return _internal_arr_d_size();
}
inline void Pet::clear_arr_d() {
  arr_d_.Clear();
}
inline double Pet::_internal_arr_d(int index) const {
  return arr_d_.Get(index);
}
inline double Pet::arr_d(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_d)
  return _internal_arr_d(index);
}
inline void Pet::set_arr_d(int index, double value) {
  arr_d_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.arr_d)
}
inline void Pet::_internal_add_arr_d(double value) {
  arr_d_.Add(value);
}
inline void Pet::add_arr_d(double value) {
  _internal_add_arr_d(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_d)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Pet::_internal_arr_d() const {
  return arr_d_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Pet::arr_d() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_d)
  return _internal_arr_d();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Pet::_internal_mutable_arr_d() {
  return &arr_d_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Pet::mutable_arr_d() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_d)
  return _internal_mutable_arr_d();
}

// repeated float arr_f = 10;
inline int Pet::_internal_arr_f_size() const {
  return arr_f_.size();
}
inline int Pet::arr_f_size() const {
  return _internal_arr_f_size();
}
inline void Pet::clear_arr_f() {
  arr_f_.Clear();
}
inline float Pet::_internal_arr_f(int index) const {
  return arr_f_.Get(index);
}
inline float Pet::arr_f(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_f)
  return _internal_arr_f(index);
}
inline void Pet::set_arr_f(int index, float value) {
  arr_f_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.arr_f)
}
inline void Pet::_internal_add_arr_f(float value) {
  arr_f_.Add(value);
}
inline void Pet::add_arr_f(float value) {
  _internal_add_arr_f(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_f)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Pet::_internal_arr_f() const {
  return arr_f_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Pet::arr_f() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_f)
  return _internal_arr_f();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Pet::_internal_mutable_arr_f() {
  return &arr_f_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Pet::mutable_arr_f() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_f)
  return _internal_mutable_arr_f();
}

// repeated int32 arr_i32 = 11;
inline int Pet::_internal_arr_i32_size() const {
  return arr_i32_.size();
}
inline int Pet::arr_i32_size() const {
  return _internal_arr_i32_size();
}
inline void Pet::clear_arr_i32() {
  arr_i32_.Clear();
}
inline int32_t Pet::_internal_arr_i32(int index) const {
  return arr_i32_.Get(index);
}
inline int32_t Pet::arr_i32(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_i32)
  return _internal_arr_i32(index);
}
inline void Pet::set_arr_i32(int index, int32_t value) {
  arr_i32_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.arr_i32)
}
inline void Pet::_internal_add_arr_i32(int32_t value) {
  arr_i32_.Add(value);
}
inline void Pet::add_arr_i32(int32_t value) {
  _internal_add_arr_i32(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_i32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Pet::_internal_arr_i32() const {
  return arr_i32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Pet::arr_i32() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_i32)
  return _internal_arr_i32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Pet::_internal_mutable_arr_i32() {
  return &arr_i32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Pet::mutable_arr_i32() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_i32)
  return _internal_mutable_arr_i32();
}

// repeated int64 arr_i64 = 12;
inline int Pet::_internal_arr_i64_size() const {
  return arr_i64_.size();
}
inline int Pet::arr_i64_size() const {
  return _internal_arr_i64_size();
}
inline void Pet::clear_arr_i64() {
  arr_i64_.Clear();
}
inline int64_t Pet::_internal_arr_i64(int index) const {
  return arr_i64_.Get(index);
}
inline int64_t Pet::arr_i64(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_i64)
  return _internal_arr_i64(index);
}
inline void Pet::set_arr_i64(int index, int64_t value) {
  arr_i64_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.arr_i64)
}
inline void Pet::_internal_add_arr_i64(int64_t value) {
  arr_i64_.Add(value);
}
inline void Pet::add_arr_i64(int64_t value) {
  _internal_add_arr_i64(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_i64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Pet::_internal_arr_i64() const {
  return arr_i64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Pet::arr_i64() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_i64)
  return _internal_arr_i64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Pet::_internal_mutable_arr_i64() {
  return &arr_i64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Pet::mutable_arr_i64() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_i64)
  return _internal_mutable_arr_i64();
}

// repeated uint32 arr_u32 = 13;
inline int Pet::_internal_arr_u32_size() const {
  return arr_u32_.size();
}
inline int Pet::arr_u32_size() const {
  return _internal_arr_u32_size();
}
inline void Pet::clear_arr_u32() {
  arr_u32_.Clear();
}
inline uint32_t Pet::_internal_arr_u32(int index) const {
  return arr_u32_.Get(index);
}
inline uint32_t Pet::arr_u32(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_u32)
  return _internal_arr_u32(index);
}
inline void Pet::set_arr_u32(int index, uint32_t value) {
  arr_u32_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.arr_u32)
}
inline void Pet::_internal_add_arr_u32(uint32_t value) {
  arr_u32_.Add(value);
}
inline void Pet::add_arr_u32(uint32_t value) {
  _internal_add_arr_u32(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_u32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Pet::_internal_arr_u32() const {
  return arr_u32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Pet::arr_u32() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_u32)
  return _internal_arr_u32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Pet::_internal_mutable_arr_u32() {
  return &arr_u32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Pet::mutable_arr_u32() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_u32)
  return _internal_mutable_arr_u32();
}

// repeated uint64 arr_u64 = 14;
inline int Pet::_internal_arr_u64_size() const {
  return arr_u64_.size();
}
inline int Pet::arr_u64_size() const {
  return _internal_arr_u64_size();
}
inline void Pet::clear_arr_u64() {
  arr_u64_.Clear();
}
inline uint64_t Pet::_internal_arr_u64(int index) const {
  return arr_u64_.Get(index);
}
inline uint64_t Pet::arr_u64(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_u64)
  return _internal_arr_u64(index);
}
inline void Pet::set_arr_u64(int index, uint64_t value) {
  arr_u64_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.arr_u64)
}
inline void Pet::_internal_add_arr_u64(uint64_t value) {
  arr_u64_.Add(value);
}
inline void Pet::add_arr_u64(uint64_t value) {
  _internal_add_arr_u64(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_u64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Pet::_internal_arr_u64() const {
  return arr_u64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Pet::arr_u64() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_u64)
  return _internal_arr_u64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Pet::_internal_mutable_arr_u64() {
  return &arr_u64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Pet::mutable_arr_u64() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_u64)
  return _internal_mutable_arr_u64();
}

// repeated bool arr_bval = 15;
inline int Pet::_internal_arr_bval_size() const {
  return arr_bval_.size();
}
inline int Pet::arr_bval_size() const {
  return _internal_arr_bval_size();
}
inline void Pet::clear_arr_bval() {
  arr_bval_.Clear();
}
inline bool Pet::_internal_arr_bval(int index) const {
  return arr_bval_.Get(index);
}
inline bool Pet::arr_bval(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_bval)
  return _internal_arr_bval(index);
}
inline void Pet::set_arr_bval(int index, bool value) {
  arr_bval_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.arr_bval)
}
inline void Pet::_internal_add_arr_bval(bool value) {
  arr_bval_.Add(value);
}
inline void Pet::add_arr_bval(bool value) {
  _internal_add_arr_bval(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_bval)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Pet::_internal_arr_bval() const {
  return arr_bval_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Pet::arr_bval() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_bval)
  return _internal_arr_bval();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Pet::_internal_mutable_arr_bval() {
  return &arr_bval_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Pet::mutable_arr_bval() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_bval)
  return _internal_mutable_arr_bval();
}

// repeated string arr_s = 16;
inline int Pet::_internal_arr_s_size() const {
  return arr_s_.size();
}
inline int Pet::arr_s_size() const {
  return _internal_arr_s_size();
}
inline void Pet::clear_arr_s() {
  arr_s_.Clear();
}
inline std::string* Pet::add_arr_s() {
  std::string* _s = _internal_add_arr_s();
  // @@protoc_insertion_point(field_add_mutable:benchmark.pb.Pet.arr_s)
  return _s;
}
inline const std::string& Pet::_internal_arr_s(int index) const {
  return arr_s_.Get(index);
}
inline const std::string& Pet::arr_s(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_s)
  return _internal_arr_s(index);
}
inline std::string* Pet::mutable_arr_s(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.arr_s)
  return arr_s_.Mutable(index);
}
inline void Pet::set_arr_s(int index, const std::string& value) {
  arr_s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.arr_s)
}
inline void Pet::set_arr_s(int index, std::string&& value) {
  arr_s_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.arr_s)
}
inline void Pet::set_arr_s(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:benchmark.pb.Pet.arr_s)
}
inline void Pet::set_arr_s(int index, const char* value, size_t size) {
  arr_s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:benchmark.pb.Pet.arr_s)
}
inline std::string* Pet::_internal_add_arr_s() {
  return arr_s_.Add();
}
inline void Pet::add_arr_s(const std::string& value) {
  arr_s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_s)
}
inline void Pet::add_arr_s(std::string&& value) {
  arr_s_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_s)
}
inline void Pet::add_arr_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:benchmark.pb.Pet.arr_s)
}
inline void Pet::add_arr_s(const char* value, size_t size) {
  arr_s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:benchmark.pb.Pet.arr_s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Pet::arr_s() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_s)
  return arr_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Pet::mutable_arr_s() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_s)
  return &arr_s_;
}

// repeated double vec_d = 17;
inline int Pet::_internal_vec_d_size() const {
  return vec_d_.size();
}
inline int Pet::vec_d_size() const {
  return _internal_vec_d_size();
}
inline void Pet::clear_vec_d() {
  vec_d_.Clear();
}
inline double Pet::_internal_vec_d(int index) const {
  return vec_d_.Get(index);
}
inline double Pet::vec_d(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_d)
  return _internal_vec_d(index);
}
inline void Pet::set_vec_d(int index, double value) {
  vec_d_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.vec_d)
}
inline void Pet::_internal_add_vec_d(double value) {
  vec_d_.Add(value);
}
inline void Pet::add_vec_d(double value) {
  _internal_add_vec_d(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_d)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Pet::_internal_vec_d() const {
  return vec_d_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Pet::vec_d() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_d)
  return _internal_vec_d();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Pet::_internal_mutable_vec_d() {
  return &vec_d_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Pet::mutable_vec_d() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_d)
  return _internal_mutable_vec_d();
}

// repeated float vec_f = 18;
inline int Pet::_internal_vec_f_size() const {
  return vec_f_.size();
}
inline int Pet::vec_f_size() const {
  return _internal_vec_f_size();
}
inline void Pet::clear_vec_f() {
  vec_f_.Clear();
}
inline float Pet::_internal_vec_f(int index) const {
  return vec_f_.Get(index);
}
inline float Pet::vec_f(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_f)
  return _internal_vec_f(index);
}
inline void Pet::set_vec_f(int index, float value) {
  vec_f_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.vec_f)
}
inline void Pet::_internal_add_vec_f(float value) {
  vec_f_.Add(value);
}
inline void Pet::add_vec_f(float value) {
  _internal_add_vec_f(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_f)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Pet::_internal_vec_f() const {
  return vec_f_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Pet::vec_f() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_f)
  return _internal_vec_f();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Pet::_internal_mutable_vec_f() {
  return &vec_f_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Pet::mutable_vec_f() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_f)
  return _internal_mutable_vec_f();
}

// repeated int32 vec_i32 = 19;
inline int Pet::_internal_vec_i32_size() const {
  return vec_i32_.size();
}
inline int Pet::vec_i32_size() const {
  return _internal_vec_i32_size();
}
inline void Pet::clear_vec_i32() {
  vec_i32_.Clear();
}
inline int32_t Pet::_internal_vec_i32(int index) const {
  return vec_i32_.Get(index);
}
inline int32_t Pet::vec_i32(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_i32)
  return _internal_vec_i32(index);
}
inline void Pet::set_vec_i32(int index, int32_t value) {
  vec_i32_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.vec_i32)
}
inline void Pet::_internal_add_vec_i32(int32_t value) {
  vec_i32_.Add(value);
}
inline void Pet::add_vec_i32(int32_t value) {
  _internal_add_vec_i32(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_i32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Pet::_internal_vec_i32() const {
  return vec_i32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Pet::vec_i32() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_i32)
  return _internal_vec_i32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Pet::_internal_mutable_vec_i32() {
  return &vec_i32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Pet::mutable_vec_i32() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_i32)
  return _internal_mutable_vec_i32();
}

// repeated int64 vec_i64 = 20;
inline int Pet::_internal_vec_i64_size() const {
  return vec_i64_.size();
}
inline int Pet::vec_i64_size() const {
  return _internal_vec_i64_size();
}
inline void Pet::clear_vec_i64() {
  vec_i64_.Clear();
}
inline int64_t Pet::_internal_vec_i64(int index) const {
  return vec_i64_.Get(index);
}
inline int64_t Pet::vec_i64(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_i64)
  return _internal_vec_i64(index);
}
inline void Pet::set_vec_i64(int index, int64_t value) {
  vec_i64_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.vec_i64)
}
inline void Pet::_internal_add_vec_i64(int64_t value) {
  vec_i64_.Add(value);
}
inline void Pet::add_vec_i64(int64_t value) {
  _internal_add_vec_i64(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_i64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Pet::_internal_vec_i64() const {
  return vec_i64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Pet::vec_i64() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_i64)
  return _internal_vec_i64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Pet::_internal_mutable_vec_i64() {
  return &vec_i64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Pet::mutable_vec_i64() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_i64)
  return _internal_mutable_vec_i64();
}

// repeated uint32 vec_u32 = 21;
inline int Pet::_internal_vec_u32_size() const {
  return vec_u32_.size();
}
inline int Pet::vec_u32_size() const {
  return _internal_vec_u32_size();
}
inline void Pet::clear_vec_u32() {
  vec_u32_.Clear();
}
inline uint32_t Pet::_internal_vec_u32(int index) const {
  return vec_u32_.Get(index);
}
inline uint32_t Pet::vec_u32(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_u32)
  return _internal_vec_u32(index);
}
inline void Pet::set_vec_u32(int index, uint32_t value) {
  vec_u32_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.vec_u32)
}
inline void Pet::_internal_add_vec_u32(uint32_t value) {
  vec_u32_.Add(value);
}
inline void Pet::add_vec_u32(uint32_t value) {
  _internal_add_vec_u32(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_u32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Pet::_internal_vec_u32() const {
  return vec_u32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Pet::vec_u32() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_u32)
  return _internal_vec_u32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Pet::_internal_mutable_vec_u32() {
  return &vec_u32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Pet::mutable_vec_u32() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_u32)
  return _internal_mutable_vec_u32();
}

// repeated uint64 vec_u64 = 22;
inline int Pet::_internal_vec_u64_size() const {
  return vec_u64_.size();
}
inline int Pet::vec_u64_size() const {
  return _internal_vec_u64_size();
}
inline void Pet::clear_vec_u64() {
  vec_u64_.Clear();
}
inline uint64_t Pet::_internal_vec_u64(int index) const {
  return vec_u64_.Get(index);
}
inline uint64_t Pet::vec_u64(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_u64)
  return _internal_vec_u64(index);
}
inline void Pet::set_vec_u64(int index, uint64_t value) {
  vec_u64_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.vec_u64)
}
inline void Pet::_internal_add_vec_u64(uint64_t value) {
  vec_u64_.Add(value);
}
inline void Pet::add_vec_u64(uint64_t value) {
  _internal_add_vec_u64(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_u64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Pet::_internal_vec_u64() const {
  return vec_u64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Pet::vec_u64() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_u64)
  return _internal_vec_u64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Pet::_internal_mutable_vec_u64() {
  return &vec_u64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Pet::mutable_vec_u64() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_u64)
  return _internal_mutable_vec_u64();
}

// repeated bool vec_bval = 23;
inline int Pet::_internal_vec_bval_size() const {
  return vec_bval_.size();
}
inline int Pet::vec_bval_size() const {
  return _internal_vec_bval_size();
}
inline void Pet::clear_vec_bval() {
  vec_bval_.Clear();
}
inline bool Pet::_internal_vec_bval(int index) const {
  return vec_bval_.Get(index);
}
inline bool Pet::vec_bval(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_bval)
  return _internal_vec_bval(index);
}
inline void Pet::set_vec_bval(int index, bool value) {
  vec_bval_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.vec_bval)
}
inline void Pet::_internal_add_vec_bval(bool value) {
  vec_bval_.Add(value);
}
inline void Pet::add_vec_bval(bool value) {
  _internal_add_vec_bval(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_bval)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Pet::_internal_vec_bval() const {
  return vec_bval_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Pet::vec_bval() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_bval)
  return _internal_vec_bval();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Pet::_internal_mutable_vec_bval() {
  return &vec_bval_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Pet::mutable_vec_bval() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_bval)
  return _internal_mutable_vec_bval();
}

// repeated string vec_s = 24;
inline int Pet::_internal_vec_s_size() const {
  return vec_s_.size();
}
inline int Pet::vec_s_size() const {
  return _internal_vec_s_size();
}
inline void Pet::clear_vec_s() {
  vec_s_.Clear();
}
inline std::string* Pet::add_vec_s() {
  std::string* _s = _internal_add_vec_s();
  // @@protoc_insertion_point(field_add_mutable:benchmark.pb.Pet.vec_s)
  return _s;
}
inline const std::string& Pet::_internal_vec_s(int index) const {
  return vec_s_.Get(index);
}
inline const std::string& Pet::vec_s(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_s)
  return _internal_vec_s(index);
}
inline std::string* Pet::mutable_vec_s(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.vec_s)
  return vec_s_.Mutable(index);
}
inline void Pet::set_vec_s(int index, const std::string& value) {
  vec_s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.vec_s)
}
inline void Pet::set_vec_s(int index, std::string&& value) {
  vec_s_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.vec_s)
}
inline void Pet::set_vec_s(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vec_s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:benchmark.pb.Pet.vec_s)
}
inline void Pet::set_vec_s(int index, const char* value, size_t size) {
  vec_s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:benchmark.pb.Pet.vec_s)
}
inline std::string* Pet::_internal_add_vec_s() {
  return vec_s_.Add();
}
inline void Pet::add_vec_s(const std::string& value) {
  vec_s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_s)
}
inline void Pet::add_vec_s(std::string&& value) {
  vec_s_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_s)
}
inline void Pet::add_vec_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vec_s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:benchmark.pb.Pet.vec_s)
}
inline void Pet::add_vec_s(const char* value, size_t size) {
  vec_s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:benchmark.pb.Pet.vec_s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Pet::vec_s() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_s)
  return vec_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Pet::mutable_vec_s() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_s)
  return &vec_s_;
}

// .benchmark.pb.Owner own = 25;
inline bool Pet::_internal_has_own() const {
  return this != internal_default_instance() && own_ != nullptr;
}
inline bool Pet::has_own() const {
  return _internal_has_own();
}
inline void Pet::clear_own() {
  if (GetArenaForAllocation() == nullptr && own_ != nullptr) {
    delete own_;
  }
  own_ = nullptr;
}
inline const ::benchmark::pb::Owner& Pet::_internal_own() const {
  const ::benchmark::pb::Owner* p = own_;
  return p != nullptr ? *p : reinterpret_cast<const ::benchmark::pb::Owner&>(
      ::benchmark::pb::_Owner_default_instance_);
}
inline const ::benchmark::pb::Owner& Pet::own() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.own)
  return _internal_own();
}
inline void Pet::unsafe_arena_set_allocated_own(
    ::benchmark::pb::Owner* own) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(own_);
  }
  own_ = own;
  if (own) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:benchmark.pb.Pet.own)
}
inline ::benchmark::pb::Owner* Pet::release_own() {
  
  ::benchmark::pb::Owner* temp = own_;
  own_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::benchmark::pb::Owner* Pet::unsafe_arena_release_own() {
  // @@protoc_insertion_point(field_release:benchmark.pb.Pet.own)
  
  ::benchmark::pb::Owner* temp = own_;
  own_ = nullptr;
  return temp;
}
inline ::benchmark::pb::Owner* Pet::_internal_mutable_own() {
  
  if (own_ == nullptr) {
    auto* p = CreateMaybeMessage<::benchmark::pb::Owner>(GetArenaForAllocation());
    own_ = p;
  }
  return own_;
}
inline ::benchmark::pb::Owner* Pet::mutable_own() {
  ::benchmark::pb::Owner* _msg = _internal_mutable_own();
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.own)
  return _msg;
}
inline void Pet::set_allocated_own(::benchmark::pb::Owner* own) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete own_;
  }
  if (own) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::benchmark::pb::Owner>::GetOwningArena(own);
    if (message_arena != submessage_arena) {
      own = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, own, submessage_arena);
    }
    
  } else {
    
  }
  own_ = own;
  // @@protoc_insertion_point(field_set_allocated:benchmark.pb.Pet.own)
}

// repeated .benchmark.pb.Owner arr_own = 26;
inline int Pet::_internal_arr_own_size() const {
  return arr_own_.size();
}
inline int Pet::arr_own_size() const {
  return _internal_arr_own_size();
}
inline void Pet::clear_arr_own() {
  arr_own_.Clear();
}
inline ::benchmark::pb::Owner* Pet::mutable_arr_own(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.arr_own)
  return arr_own_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::Owner >*
Pet::mutable_arr_own() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_own)
  return &arr_own_;
}
inline const ::benchmark::pb::Owner& Pet::_internal_arr_own(int index) const {
  return arr_own_.Get(index);
}
inline const ::benchmark::pb::Owner& Pet::arr_own(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_own)
  return _internal_arr_own(index);
}
inline ::benchmark::pb::Owner* Pet::_internal_add_arr_own() {
  return arr_own_.Add();
}
inline ::benchmark::pb::Owner* Pet::add_arr_own() {
  ::benchmark::pb::Owner* _add = _internal_add_arr_own();
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_own)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::Owner >&
Pet::arr_own() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_own)
  return arr_own_;
}

// repeated .benchmark.pb.Owner vec_own = 27;
inline int Pet::_internal_vec_own_size() const {
  return vec_own_.size();
}
inline int Pet::vec_own_size() const {
  return _internal_vec_own_size();
}
inline void Pet::clear_vec_own() {
  vec_own_.Clear();
}
inline ::benchmark::pb::Owner* Pet::mutable_vec_own(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.vec_own)
  return vec_own_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::Owner >*
Pet::mutable_vec_own() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_own)
  return &vec_own_;
}
inline const ::benchmark::pb::Owner& Pet::_internal_vec_own(int index) const {
  return vec_own_.Get(index);
}
inline const ::benchmark::pb::Owner& Pet::vec_own(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_own)
  return _internal_vec_own(index);
}
inline ::benchmark::pb::Owner* Pet::_internal_add_vec_own() {
  return vec_own_.Add();
}
inline ::benchmark::pb::Owner* Pet::add_vec_own() {
  ::benchmark::pb::Owner* _add = _internal_add_vec_own();
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_own)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::Owner >&
Pet::vec_own() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_own)
  return vec_own_;
}

// .benchmark.pb.OwnerV2 own_v2 = 28;
inline bool Pet::_internal_has_own_v2() const {
  return this != internal_default_instance() && own_v2_ != nullptr;
}
inline bool Pet::has_own_v2() const {
  return _internal_has_own_v2();
}
inline void Pet::clear_own_v2() {
  if (GetArenaForAllocation() == nullptr && own_v2_ != nullptr) {
    delete own_v2_;
  }
  own_v2_ = nullptr;
}
inline const ::benchmark::pb::OwnerV2& Pet::_internal_own_v2() const {
  const ::benchmark::pb::OwnerV2* p = own_v2_;
  return p != nullptr ? *p : reinterpret_cast<const ::benchmark::pb::OwnerV2&>(
      ::benchmark::pb::_OwnerV2_default_instance_);
}
inline const ::benchmark::pb::OwnerV2& Pet::own_v2() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.own_v2)
  return _internal_own_v2();
}
inline void Pet::unsafe_arena_set_allocated_own_v2(
    ::benchmark::pb::OwnerV2* own_v2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(own_v2_);
  }
  own_v2_ = own_v2;
  if (own_v2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:benchmark.pb.Pet.own_v2)
}
inline ::benchmark::pb::OwnerV2* Pet::release_own_v2() {
  
  ::benchmark::pb::OwnerV2* temp = own_v2_;
  own_v2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::benchmark::pb::OwnerV2* Pet::unsafe_arena_release_own_v2() {
  // @@protoc_insertion_point(field_release:benchmark.pb.Pet.own_v2)
  
  ::benchmark::pb::OwnerV2* temp = own_v2_;
  own_v2_ = nullptr;
  return temp;
}
inline ::benchmark::pb::OwnerV2* Pet::_internal_mutable_own_v2() {
  
  if (own_v2_ == nullptr) {
    auto* p = CreateMaybeMessage<::benchmark::pb::OwnerV2>(GetArenaForAllocation());
    own_v2_ = p;
  }
  return own_v2_;
}
inline ::benchmark::pb::OwnerV2* Pet::mutable_own_v2() {
  ::benchmark::pb::OwnerV2* _msg = _internal_mutable_own_v2();
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.own_v2)
  return _msg;
}
inline void Pet::set_allocated_own_v2(::benchmark::pb::OwnerV2* own_v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete own_v2_;
  }
  if (own_v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::benchmark::pb::OwnerV2>::GetOwningArena(own_v2);
    if (message_arena != submessage_arena) {
      own_v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, own_v2, submessage_arena);
    }
    
  } else {
    
  }
  own_v2_ = own_v2;
  // @@protoc_insertion_point(field_set_allocated:benchmark.pb.Pet.own_v2)
}

// repeated .benchmark.pb.OwnerV2 arr_own_v2 = 29;
inline int Pet::_internal_arr_own_v2_size() const {
  return arr_own_v2_.size();
}
inline int Pet::arr_own_v2_size() const {
  return _internal_arr_own_v2_size();
}
inline void Pet::clear_arr_own_v2() {
  arr_own_v2_.Clear();
}
inline ::benchmark::pb::OwnerV2* Pet::mutable_arr_own_v2(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.arr_own_v2)
  return arr_own_v2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV2 >*
Pet::mutable_arr_own_v2() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_own_v2)
  return &arr_own_v2_;
}
inline const ::benchmark::pb::OwnerV2& Pet::_internal_arr_own_v2(int index) const {
  return arr_own_v2_.Get(index);
}
inline const ::benchmark::pb::OwnerV2& Pet::arr_own_v2(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_own_v2)
  return _internal_arr_own_v2(index);
}
inline ::benchmark::pb::OwnerV2* Pet::_internal_add_arr_own_v2() {
  return arr_own_v2_.Add();
}
inline ::benchmark::pb::OwnerV2* Pet::add_arr_own_v2() {
  ::benchmark::pb::OwnerV2* _add = _internal_add_arr_own_v2();
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_own_v2)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV2 >&
Pet::arr_own_v2() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_own_v2)
  return arr_own_v2_;
}

// repeated .benchmark.pb.OwnerV2 vec_own_v2 = 30;
inline int Pet::_internal_vec_own_v2_size() const {
  return vec_own_v2_.size();
}
inline int Pet::vec_own_v2_size() const {
  return _internal_vec_own_v2_size();
}
inline void Pet::clear_vec_own_v2() {
  vec_own_v2_.Clear();
}
inline ::benchmark::pb::OwnerV2* Pet::mutable_vec_own_v2(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.vec_own_v2)
  return vec_own_v2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV2 >*
Pet::mutable_vec_own_v2() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_own_v2)
  return &vec_own_v2_;
}
inline const ::benchmark::pb::OwnerV2& Pet::_internal_vec_own_v2(int index) const {
  return vec_own_v2_.Get(index);
}
inline const ::benchmark::pb::OwnerV2& Pet::vec_own_v2(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_own_v2)
  return _internal_vec_own_v2(index);
}
inline ::benchmark::pb::OwnerV2* Pet::_internal_add_vec_own_v2() {
  return vec_own_v2_.Add();
}
inline ::benchmark::pb::OwnerV2* Pet::add_vec_own_v2() {
  ::benchmark::pb::OwnerV2* _add = _internal_add_vec_own_v2();
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_own_v2)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV2 >&
Pet::vec_own_v2() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_own_v2)
  return vec_own_v2_;
}

// .benchmark.pb.OwnerV3 own_v3 = 31;
inline bool Pet::_internal_has_own_v3() const {
  return this != internal_default_instance() && own_v3_ != nullptr;
}
inline bool Pet::has_own_v3() const {
  return _internal_has_own_v3();
}
inline void Pet::clear_own_v3() {
  if (GetArenaForAllocation() == nullptr && own_v3_ != nullptr) {
    delete own_v3_;
  }
  own_v3_ = nullptr;
}
inline const ::benchmark::pb::OwnerV3& Pet::_internal_own_v3() const {
  const ::benchmark::pb::OwnerV3* p = own_v3_;
  return p != nullptr ? *p : reinterpret_cast<const ::benchmark::pb::OwnerV3&>(
      ::benchmark::pb::_OwnerV3_default_instance_);
}
inline const ::benchmark::pb::OwnerV3& Pet::own_v3() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.own_v3)
  return _internal_own_v3();
}
inline void Pet::unsafe_arena_set_allocated_own_v3(
    ::benchmark::pb::OwnerV3* own_v3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(own_v3_);
  }
  own_v3_ = own_v3;
  if (own_v3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:benchmark.pb.Pet.own_v3)
}
inline ::benchmark::pb::OwnerV3* Pet::release_own_v3() {
  
  ::benchmark::pb::OwnerV3* temp = own_v3_;
  own_v3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::benchmark::pb::OwnerV3* Pet::unsafe_arena_release_own_v3() {
  // @@protoc_insertion_point(field_release:benchmark.pb.Pet.own_v3)
  
  ::benchmark::pb::OwnerV3* temp = own_v3_;
  own_v3_ = nullptr;
  return temp;
}
inline ::benchmark::pb::OwnerV3* Pet::_internal_mutable_own_v3() {
  
  if (own_v3_ == nullptr) {
    auto* p = CreateMaybeMessage<::benchmark::pb::OwnerV3>(GetArenaForAllocation());
    own_v3_ = p;
  }
  return own_v3_;
}
inline ::benchmark::pb::OwnerV3* Pet::mutable_own_v3() {
  ::benchmark::pb::OwnerV3* _msg = _internal_mutable_own_v3();
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.own_v3)
  return _msg;
}
inline void Pet::set_allocated_own_v3(::benchmark::pb::OwnerV3* own_v3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete own_v3_;
  }
  if (own_v3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::benchmark::pb::OwnerV3>::GetOwningArena(own_v3);
    if (message_arena != submessage_arena) {
      own_v3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, own_v3, submessage_arena);
    }
    
  } else {
    
  }
  own_v3_ = own_v3;
  // @@protoc_insertion_point(field_set_allocated:benchmark.pb.Pet.own_v3)
}

// repeated .benchmark.pb.OwnerV3 arr_own_v3 = 32;
inline int Pet::_internal_arr_own_v3_size() const {
  return arr_own_v3_.size();
}
inline int Pet::arr_own_v3_size() const {
  return _internal_arr_own_v3_size();
}
inline void Pet::clear_arr_own_v3() {
  arr_own_v3_.Clear();
}
inline ::benchmark::pb::OwnerV3* Pet::mutable_arr_own_v3(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.arr_own_v3)
  return arr_own_v3_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV3 >*
Pet::mutable_arr_own_v3() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_own_v3)
  return &arr_own_v3_;
}
inline const ::benchmark::pb::OwnerV3& Pet::_internal_arr_own_v3(int index) const {
  return arr_own_v3_.Get(index);
}
inline const ::benchmark::pb::OwnerV3& Pet::arr_own_v3(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_own_v3)
  return _internal_arr_own_v3(index);
}
inline ::benchmark::pb::OwnerV3* Pet::_internal_add_arr_own_v3() {
  return arr_own_v3_.Add();
}
inline ::benchmark::pb::OwnerV3* Pet::add_arr_own_v3() {
  ::benchmark::pb::OwnerV3* _add = _internal_add_arr_own_v3();
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_own_v3)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV3 >&
Pet::arr_own_v3() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_own_v3)
  return arr_own_v3_;
}

// repeated .benchmark.pb.OwnerV3 vec_own_v3 = 33;
inline int Pet::_internal_vec_own_v3_size() const {
  return vec_own_v3_.size();
}
inline int Pet::vec_own_v3_size() const {
  return _internal_vec_own_v3_size();
}
inline void Pet::clear_vec_own_v3() {
  vec_own_v3_.Clear();
}
inline ::benchmark::pb::OwnerV3* Pet::mutable_vec_own_v3(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.vec_own_v3)
  return vec_own_v3_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV3 >*
Pet::mutable_vec_own_v3() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_own_v3)
  return &vec_own_v3_;
}
inline const ::benchmark::pb::OwnerV3& Pet::_internal_vec_own_v3(int index) const {
  return vec_own_v3_.Get(index);
}
inline const ::benchmark::pb::OwnerV3& Pet::vec_own_v3(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_own_v3)
  return _internal_vec_own_v3(index);
}
inline ::benchmark::pb::OwnerV3* Pet::_internal_add_vec_own_v3() {
  return vec_own_v3_.Add();
}
inline ::benchmark::pb::OwnerV3* Pet::add_vec_own_v3() {
  ::benchmark::pb::OwnerV3* _add = _internal_add_vec_own_v3();
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_own_v3)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV3 >&
Pet::vec_own_v3() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_own_v3)
  return vec_own_v3_;
}

// .benchmark.pb.OwnerV4 own_v4 = 34;
inline bool Pet::_internal_has_own_v4() const {
  return this != internal_default_instance() && own_v4_ != nullptr;
}
inline bool Pet::has_own_v4() const {
  return _internal_has_own_v4();
}
inline void Pet::clear_own_v4() {
  if (GetArenaForAllocation() == nullptr && own_v4_ != nullptr) {
    delete own_v4_;
  }
  own_v4_ = nullptr;
}
inline const ::benchmark::pb::OwnerV4& Pet::_internal_own_v4() const {
  const ::benchmark::pb::OwnerV4* p = own_v4_;
  return p != nullptr ? *p : reinterpret_cast<const ::benchmark::pb::OwnerV4&>(
      ::benchmark::pb::_OwnerV4_default_instance_);
}
inline const ::benchmark::pb::OwnerV4& Pet::own_v4() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.own_v4)
  return _internal_own_v4();
}
inline void Pet::unsafe_arena_set_allocated_own_v4(
    ::benchmark::pb::OwnerV4* own_v4) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(own_v4_);
  }
  own_v4_ = own_v4;
  if (own_v4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:benchmark.pb.Pet.own_v4)
}
inline ::benchmark::pb::OwnerV4* Pet::release_own_v4() {
  
  ::benchmark::pb::OwnerV4* temp = own_v4_;
  own_v4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::benchmark::pb::OwnerV4* Pet::unsafe_arena_release_own_v4() {
  // @@protoc_insertion_point(field_release:benchmark.pb.Pet.own_v4)
  
  ::benchmark::pb::OwnerV4* temp = own_v4_;
  own_v4_ = nullptr;
  return temp;
}
inline ::benchmark::pb::OwnerV4* Pet::_internal_mutable_own_v4() {
  
  if (own_v4_ == nullptr) {
    auto* p = CreateMaybeMessage<::benchmark::pb::OwnerV4>(GetArenaForAllocation());
    own_v4_ = p;
  }
  return own_v4_;
}
inline ::benchmark::pb::OwnerV4* Pet::mutable_own_v4() {
  ::benchmark::pb::OwnerV4* _msg = _internal_mutable_own_v4();
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.own_v4)
  return _msg;
}
inline void Pet::set_allocated_own_v4(::benchmark::pb::OwnerV4* own_v4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete own_v4_;
  }
  if (own_v4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::benchmark::pb::OwnerV4>::GetOwningArena(own_v4);
    if (message_arena != submessage_arena) {
      own_v4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, own_v4, submessage_arena);
    }
    
  } else {
    
  }
  own_v4_ = own_v4;
  // @@protoc_insertion_point(field_set_allocated:benchmark.pb.Pet.own_v4)
}

// repeated .benchmark.pb.OwnerV4 arr_own_v4 = 35;
inline int Pet::_internal_arr_own_v4_size() const {
  return arr_own_v4_.size();
}
inline int Pet::arr_own_v4_size() const {
  return _internal_arr_own_v4_size();
}
inline void Pet::clear_arr_own_v4() {
  arr_own_v4_.Clear();
}
inline ::benchmark::pb::OwnerV4* Pet::mutable_arr_own_v4(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.arr_own_v4)
  return arr_own_v4_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV4 >*
Pet::mutable_arr_own_v4() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_own_v4)
  return &arr_own_v4_;
}
inline const ::benchmark::pb::OwnerV4& Pet::_internal_arr_own_v4(int index) const {
  return arr_own_v4_.Get(index);
}
inline const ::benchmark::pb::OwnerV4& Pet::arr_own_v4(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_own_v4)
  return _internal_arr_own_v4(index);
}
inline ::benchmark::pb::OwnerV4* Pet::_internal_add_arr_own_v4() {
  return arr_own_v4_.Add();
}
inline ::benchmark::pb::OwnerV4* Pet::add_arr_own_v4() {
  ::benchmark::pb::OwnerV4* _add = _internal_add_arr_own_v4();
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_own_v4)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV4 >&
Pet::arr_own_v4() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_own_v4)
  return arr_own_v4_;
}

// repeated .benchmark.pb.OwnerV4 vec_own_v4 = 36;
inline int Pet::_internal_vec_own_v4_size() const {
  return vec_own_v4_.size();
}
inline int Pet::vec_own_v4_size() const {
  return _internal_vec_own_v4_size();
}
inline void Pet::clear_vec_own_v4() {
  vec_own_v4_.Clear();
}
inline ::benchmark::pb::OwnerV4* Pet::mutable_vec_own_v4(int index) {
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.vec_own_v4)
  return vec_own_v4_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV4 >*
Pet::mutable_vec_own_v4() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_own_v4)
  return &vec_own_v4_;
}
inline const ::benchmark::pb::OwnerV4& Pet::_internal_vec_own_v4(int index) const {
  return vec_own_v4_.Get(index);
}
inline const ::benchmark::pb::OwnerV4& Pet::vec_own_v4(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_own_v4)
  return _internal_vec_own_v4(index);
}
inline ::benchmark::pb::OwnerV4* Pet::_internal_add_vec_own_v4() {
  return vec_own_v4_.Add();
}
inline ::benchmark::pb::OwnerV4* Pet::add_vec_own_v4() {
  ::benchmark::pb::OwnerV4* _add = _internal_add_vec_own_v4();
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_own_v4)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchmark::pb::OwnerV4 >&
Pet::vec_own_v4() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_own_v4)
  return vec_own_v4_;
}

// .benchmark.pb.PetType pet_type = 37;
inline void Pet::clear_pet_type() {
  pet_type_ = 0;
}
inline ::benchmark::pb::PetType Pet::_internal_pet_type() const {
  return static_cast< ::benchmark::pb::PetType >(pet_type_);
}
inline ::benchmark::pb::PetType Pet::pet_type() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.pet_type)
  return _internal_pet_type();
}
inline void Pet::_internal_set_pet_type(::benchmark::pb::PetType value) {
  
  pet_type_ = value;
}
inline void Pet::set_pet_type(::benchmark::pb::PetType value) {
  _internal_set_pet_type(value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.pet_type)
}

// repeated .benchmark.pb.PetType arr_pet_type = 38;
inline int Pet::_internal_arr_pet_type_size() const {
  return arr_pet_type_.size();
}
inline int Pet::arr_pet_type_size() const {
  return _internal_arr_pet_type_size();
}
inline void Pet::clear_arr_pet_type() {
  arr_pet_type_.Clear();
}
inline ::benchmark::pb::PetType Pet::_internal_arr_pet_type(int index) const {
  return static_cast< ::benchmark::pb::PetType >(arr_pet_type_.Get(index));
}
inline ::benchmark::pb::PetType Pet::arr_pet_type(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_pet_type)
  return _internal_arr_pet_type(index);
}
inline void Pet::set_arr_pet_type(int index, ::benchmark::pb::PetType value) {
  arr_pet_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.arr_pet_type)
}
inline void Pet::_internal_add_arr_pet_type(::benchmark::pb::PetType value) {
  arr_pet_type_.Add(value);
}
inline void Pet::add_arr_pet_type(::benchmark::pb::PetType value) {
  _internal_add_arr_pet_type(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.arr_pet_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Pet::arr_pet_type() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.arr_pet_type)
  return arr_pet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Pet::_internal_mutable_arr_pet_type() {
  return &arr_pet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Pet::mutable_arr_pet_type() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.arr_pet_type)
  return _internal_mutable_arr_pet_type();
}

// repeated .benchmark.pb.PetType vec_pet_type = 39;
inline int Pet::_internal_vec_pet_type_size() const {
  return vec_pet_type_.size();
}
inline int Pet::vec_pet_type_size() const {
  return _internal_vec_pet_type_size();
}
inline void Pet::clear_vec_pet_type() {
  vec_pet_type_.Clear();
}
inline ::benchmark::pb::PetType Pet::_internal_vec_pet_type(int index) const {
  return static_cast< ::benchmark::pb::PetType >(vec_pet_type_.Get(index));
}
inline ::benchmark::pb::PetType Pet::vec_pet_type(int index) const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.vec_pet_type)
  return _internal_vec_pet_type(index);
}
inline void Pet::set_vec_pet_type(int index, ::benchmark::pb::PetType value) {
  vec_pet_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.vec_pet_type)
}
inline void Pet::_internal_add_vec_pet_type(::benchmark::pb::PetType value) {
  vec_pet_type_.Add(value);
}
inline void Pet::add_vec_pet_type(::benchmark::pb::PetType value) {
  _internal_add_vec_pet_type(value);
  // @@protoc_insertion_point(field_add:benchmark.pb.Pet.vec_pet_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Pet::vec_pet_type() const {
  // @@protoc_insertion_point(field_list:benchmark.pb.Pet.vec_pet_type)
  return vec_pet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Pet::_internal_mutable_vec_pet_type() {
  return &vec_pet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Pet::mutable_vec_pet_type() {
  // @@protoc_insertion_point(field_mutable_list:benchmark.pb.Pet.vec_pet_type)
  return _internal_mutable_vec_pet_type();
}

// bytes arr_u8 = 40;
inline void Pet::clear_arr_u8() {
  arr_u8_.ClearToEmpty();
}
inline const std::string& Pet::arr_u8() const {
  // @@protoc_insertion_point(field_get:benchmark.pb.Pet.arr_u8)
  return _internal_arr_u8();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pet::set_arr_u8(ArgT0&& arg0, ArgT... args) {
 
 arr_u8_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:benchmark.pb.Pet.arr_u8)
}
inline std::string* Pet::mutable_arr_u8() {
  std::string* _s = _internal_mutable_arr_u8();
  // @@protoc_insertion_point(field_mutable:benchmark.pb.Pet.arr_u8)
  return _s;
}
inline const std::string& Pet::_internal_arr_u8() const {
  return arr_u8_.Get();
}
inline void Pet::_internal_set_arr_u8(const std::string& value) {
  
  arr_u8_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pet::_internal_mutable_arr_u8() {
  
  return arr_u8_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pet::release_arr_u8() {
  // @@protoc_insertion_point(field_release:benchmark.pb.Pet.arr_u8)
  return arr_u8_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pet::set_allocated_arr_u8(std::string* arr_u8) {
  if (arr_u8 != nullptr) {
    
  } else {
    
  }
  arr_u8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arr_u8,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (arr_u8_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    arr_u8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:benchmark.pb.Pet.arr_u8)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace benchmark

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::benchmark::pb::PetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::benchmark::pb::PetType>() {
  return ::benchmark::pb::PetType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pet_2eproto
