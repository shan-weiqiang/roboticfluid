// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file pet.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_BENCHMARK_IDL_PET_H_
#define _FAST_DDS_GENERATED_BENCHMARK_IDL_PET_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(PET_SOURCE)
#define PET_DllAPI __declspec( dllexport )
#else
#define PET_DllAPI __declspec( dllimport )
#endif // PET_SOURCE
#else
#define PET_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define PET_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace benchmark {
    namespace idl {
        /*!
         * @brief This class represents the enumeration PetType defined by the user in the IDL file.
         * @ingroup pet
         */
        enum PetType : uint32_t
        {
            DOG,
            CAT,
            BIRD,
            FISH,
            HAMSTER,
            RABBIT,
            SNAKE,
            LIZARD,
            FERRET,
            GUINEA_PIG
        };
        /*!
         * @brief This class represents the structure Owner defined by the user in the IDL file.
         * @ingroup pet
         */
        class Owner
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Owner();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Owner();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object benchmark::idl::Owner that will be copied.
             */
            eProsima_user_DllExport Owner(
                    const Owner& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object benchmark::idl::Owner that will be copied.
             */
            eProsima_user_DllExport Owner(
                    Owner&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object benchmark::idl::Owner that will be copied.
             */
            eProsima_user_DllExport Owner& operator =(
                    const Owner& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object benchmark::idl::Owner that will be copied.
             */
            eProsima_user_DllExport Owner& operator =(
                    Owner&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x benchmark::idl::Owner object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Owner& x) const;

            /*!
             * @brief Comparison operator.
             * @param x benchmark::idl::Owner object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Owner& x) const;

            /*!
             * @brief This function copies the value in member name
             * @param _name New value to be copied in member name
             */
            eProsima_user_DllExport void name(
                    const std::string& _name);

            /*!
             * @brief This function moves the value in member name
             * @param _name New value to be moved in member name
             */
            eProsima_user_DllExport void name(
                    std::string&& _name);

            /*!
             * @brief This function returns a constant reference to member name
             * @return Constant reference to member name
             */
            eProsima_user_DllExport const std::string& name() const;

            /*!
             * @brief This function returns a reference to member name
             * @return Reference to member name
             */
            eProsima_user_DllExport std::string& name();
            /*!
             * @brief This function sets a value in member age
             * @param _age New value for member age
             */
            eProsima_user_DllExport void age(
                    int32_t _age);

            /*!
             * @brief This function returns the value of member age
             * @return Value of member age
             */
            eProsima_user_DllExport int32_t age() const;

            /*!
             * @brief This function returns a reference to member age
             * @return Reference to member age
             */
            eProsima_user_DllExport int32_t& age();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const benchmark::idl::Owner& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_name;
            int32_t m_age;

        };
        /*!
         * @brief This class represents the structure OwnerV2 defined by the user in the IDL file.
         * @ingroup pet
         */
        class OwnerV2
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OwnerV2();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OwnerV2();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object benchmark::idl::OwnerV2 that will be copied.
             */
            eProsima_user_DllExport OwnerV2(
                    const OwnerV2& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object benchmark::idl::OwnerV2 that will be copied.
             */
            eProsima_user_DllExport OwnerV2(
                    OwnerV2&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object benchmark::idl::OwnerV2 that will be copied.
             */
            eProsima_user_DllExport OwnerV2& operator =(
                    const OwnerV2& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object benchmark::idl::OwnerV2 that will be copied.
             */
            eProsima_user_DllExport OwnerV2& operator =(
                    OwnerV2&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x benchmark::idl::OwnerV2 object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const OwnerV2& x) const;

            /*!
             * @brief Comparison operator.
             * @param x benchmark::idl::OwnerV2 object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const OwnerV2& x) const;

            /*!
             * @brief This function copies the value in member name
             * @param _name New value to be copied in member name
             */
            eProsima_user_DllExport void name(
                    const std::string& _name);

            /*!
             * @brief This function moves the value in member name
             * @param _name New value to be moved in member name
             */
            eProsima_user_DllExport void name(
                    std::string&& _name);

            /*!
             * @brief This function returns a constant reference to member name
             * @return Constant reference to member name
             */
            eProsima_user_DllExport const std::string& name() const;

            /*!
             * @brief This function returns a reference to member name
             * @return Reference to member name
             */
            eProsima_user_DllExport std::string& name();
            /*!
             * @brief This function sets a value in member age
             * @param _age New value for member age
             */
            eProsima_user_DllExport void age(
                    int32_t _age);

            /*!
             * @brief This function returns the value of member age
             * @return Value of member age
             */
            eProsima_user_DllExport int32_t age() const;

            /*!
             * @brief This function returns a reference to member age
             * @return Reference to member age
             */
            eProsima_user_DllExport int32_t& age();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const benchmark::idl::OwnerV2& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_name;
            int32_t m_age;

        };
        /*!
         * @brief This class represents the structure OwnerV3 defined by the user in the IDL file.
         * @ingroup pet
         */
        class OwnerV3
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OwnerV3();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OwnerV3();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object benchmark::idl::OwnerV3 that will be copied.
             */
            eProsima_user_DllExport OwnerV3(
                    const OwnerV3& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object benchmark::idl::OwnerV3 that will be copied.
             */
            eProsima_user_DllExport OwnerV3(
                    OwnerV3&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object benchmark::idl::OwnerV3 that will be copied.
             */
            eProsima_user_DllExport OwnerV3& operator =(
                    const OwnerV3& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object benchmark::idl::OwnerV3 that will be copied.
             */
            eProsima_user_DllExport OwnerV3& operator =(
                    OwnerV3&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x benchmark::idl::OwnerV3 object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const OwnerV3& x) const;

            /*!
             * @brief Comparison operator.
             * @param x benchmark::idl::OwnerV3 object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const OwnerV3& x) const;

            /*!
             * @brief This function copies the value in member name
             * @param _name New value to be copied in member name
             */
            eProsima_user_DllExport void name(
                    const std::string& _name);

            /*!
             * @brief This function moves the value in member name
             * @param _name New value to be moved in member name
             */
            eProsima_user_DllExport void name(
                    std::string&& _name);

            /*!
             * @brief This function returns a constant reference to member name
             * @return Constant reference to member name
             */
            eProsima_user_DllExport const std::string& name() const;

            /*!
             * @brief This function returns a reference to member name
             * @return Reference to member name
             */
            eProsima_user_DllExport std::string& name();
            /*!
             * @brief This function sets a value in member age
             * @param _age New value for member age
             */
            eProsima_user_DllExport void age(
                    int32_t _age);

            /*!
             * @brief This function returns the value of member age
             * @return Value of member age
             */
            eProsima_user_DllExport int32_t age() const;

            /*!
             * @brief This function returns a reference to member age
             * @return Reference to member age
             */
            eProsima_user_DllExport int32_t& age();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const benchmark::idl::OwnerV3& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_name;
            int32_t m_age;

        };
        /*!
         * @brief This class represents the structure OwnerV4 defined by the user in the IDL file.
         * @ingroup pet
         */
        class OwnerV4
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OwnerV4();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OwnerV4();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object benchmark::idl::OwnerV4 that will be copied.
             */
            eProsima_user_DllExport OwnerV4(
                    const OwnerV4& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object benchmark::idl::OwnerV4 that will be copied.
             */
            eProsima_user_DllExport OwnerV4(
                    OwnerV4&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object benchmark::idl::OwnerV4 that will be copied.
             */
            eProsima_user_DllExport OwnerV4& operator =(
                    const OwnerV4& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object benchmark::idl::OwnerV4 that will be copied.
             */
            eProsima_user_DllExport OwnerV4& operator =(
                    OwnerV4&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x benchmark::idl::OwnerV4 object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const OwnerV4& x) const;

            /*!
             * @brief Comparison operator.
             * @param x benchmark::idl::OwnerV4 object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const OwnerV4& x) const;

            /*!
             * @brief This function copies the value in member name
             * @param _name New value to be copied in member name
             */
            eProsima_user_DllExport void name(
                    const std::string& _name);

            /*!
             * @brief This function moves the value in member name
             * @param _name New value to be moved in member name
             */
            eProsima_user_DllExport void name(
                    std::string&& _name);

            /*!
             * @brief This function returns a constant reference to member name
             * @return Constant reference to member name
             */
            eProsima_user_DllExport const std::string& name() const;

            /*!
             * @brief This function returns a reference to member name
             * @return Reference to member name
             */
            eProsima_user_DllExport std::string& name();
            /*!
             * @brief This function sets a value in member age
             * @param _age New value for member age
             */
            eProsima_user_DllExport void age(
                    int32_t _age);

            /*!
             * @brief This function returns the value of member age
             * @return Value of member age
             */
            eProsima_user_DllExport int32_t age() const;

            /*!
             * @brief This function returns a reference to member age
             * @return Reference to member age
             */
            eProsima_user_DllExport int32_t& age();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const benchmark::idl::OwnerV4& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_name;
            int32_t m_age;

        };
        /*!
         * @brief This class represents the structure Pet defined by the user in the IDL file.
         * @ingroup pet
         */
        class Pet
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Pet();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Pet();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object benchmark::idl::Pet that will be copied.
             */
            eProsima_user_DllExport Pet(
                    const Pet& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object benchmark::idl::Pet that will be copied.
             */
            eProsima_user_DllExport Pet(
                    Pet&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object benchmark::idl::Pet that will be copied.
             */
            eProsima_user_DllExport Pet& operator =(
                    const Pet& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object benchmark::idl::Pet that will be copied.
             */
            eProsima_user_DllExport Pet& operator =(
                    Pet&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x benchmark::idl::Pet object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Pet& x) const;

            /*!
             * @brief Comparison operator.
             * @param x benchmark::idl::Pet object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Pet& x) const;

            /*!
             * @brief This function sets a value in member d
             * @param _d New value for member d
             */
            eProsima_user_DllExport void d(
                    double _d);

            /*!
             * @brief This function returns the value of member d
             * @return Value of member d
             */
            eProsima_user_DllExport double d() const;

            /*!
             * @brief This function returns a reference to member d
             * @return Reference to member d
             */
            eProsima_user_DllExport double& d();

            /*!
             * @brief This function sets a value in member f
             * @param _f New value for member f
             */
            eProsima_user_DllExport void f(
                    float _f);

            /*!
             * @brief This function returns the value of member f
             * @return Value of member f
             */
            eProsima_user_DllExport float f() const;

            /*!
             * @brief This function returns a reference to member f
             * @return Reference to member f
             */
            eProsima_user_DllExport float& f();

            /*!
             * @brief This function sets a value in member i32
             * @param _i32 New value for member i32
             */
            eProsima_user_DllExport void i32(
                    int32_t _i32);

            /*!
             * @brief This function returns the value of member i32
             * @return Value of member i32
             */
            eProsima_user_DllExport int32_t i32() const;

            /*!
             * @brief This function returns a reference to member i32
             * @return Reference to member i32
             */
            eProsima_user_DllExport int32_t& i32();

            /*!
             * @brief This function sets a value in member i64
             * @param _i64 New value for member i64
             */
            eProsima_user_DllExport void i64(
                    int64_t _i64);

            /*!
             * @brief This function returns the value of member i64
             * @return Value of member i64
             */
            eProsima_user_DllExport int64_t i64() const;

            /*!
             * @brief This function returns a reference to member i64
             * @return Reference to member i64
             */
            eProsima_user_DllExport int64_t& i64();

            /*!
             * @brief This function sets a value in member u32
             * @param _u32 New value for member u32
             */
            eProsima_user_DllExport void u32(
                    uint32_t _u32);

            /*!
             * @brief This function returns the value of member u32
             * @return Value of member u32
             */
            eProsima_user_DllExport uint32_t u32() const;

            /*!
             * @brief This function returns a reference to member u32
             * @return Reference to member u32
             */
            eProsima_user_DllExport uint32_t& u32();

            /*!
             * @brief This function sets a value in member u64
             * @param _u64 New value for member u64
             */
            eProsima_user_DllExport void u64(
                    uint64_t _u64);

            /*!
             * @brief This function returns the value of member u64
             * @return Value of member u64
             */
            eProsima_user_DllExport uint64_t u64() const;

            /*!
             * @brief This function returns a reference to member u64
             * @return Reference to member u64
             */
            eProsima_user_DllExport uint64_t& u64();

            /*!
             * @brief This function sets a value in member bval
             * @param _bval New value for member bval
             */
            eProsima_user_DllExport void bval(
                    bool _bval);

            /*!
             * @brief This function returns the value of member bval
             * @return Value of member bval
             */
            eProsima_user_DllExport bool bval() const;

            /*!
             * @brief This function returns a reference to member bval
             * @return Reference to member bval
             */
            eProsima_user_DllExport bool& bval();

            /*!
             * @brief This function copies the value in member s
             * @param _s New value to be copied in member s
             */
            eProsima_user_DllExport void s(
                    const std::string& _s);

            /*!
             * @brief This function moves the value in member s
             * @param _s New value to be moved in member s
             */
            eProsima_user_DllExport void s(
                    std::string&& _s);

            /*!
             * @brief This function returns a constant reference to member s
             * @return Constant reference to member s
             */
            eProsima_user_DllExport const std::string& s() const;

            /*!
             * @brief This function returns a reference to member s
             * @return Reference to member s
             */
            eProsima_user_DllExport std::string& s();
            /*!
             * @brief This function copies the value in member arr_d
             * @param _arr_d New value to be copied in member arr_d
             */
            eProsima_user_DllExport void arr_d(
                    const std::array<double, 10000>& _arr_d);

            /*!
             * @brief This function moves the value in member arr_d
             * @param _arr_d New value to be moved in member arr_d
             */
            eProsima_user_DllExport void arr_d(
                    std::array<double, 10000>&& _arr_d);

            /*!
             * @brief This function returns a constant reference to member arr_d
             * @return Constant reference to member arr_d
             */
            eProsima_user_DllExport const std::array<double, 10000>& arr_d() const;

            /*!
             * @brief This function returns a reference to member arr_d
             * @return Reference to member arr_d
             */
            eProsima_user_DllExport std::array<double, 10000>& arr_d();
            /*!
             * @brief This function copies the value in member arr_f
             * @param _arr_f New value to be copied in member arr_f
             */
            eProsima_user_DllExport void arr_f(
                    const std::array<float, 10000>& _arr_f);

            /*!
             * @brief This function moves the value in member arr_f
             * @param _arr_f New value to be moved in member arr_f
             */
            eProsima_user_DllExport void arr_f(
                    std::array<float, 10000>&& _arr_f);

            /*!
             * @brief This function returns a constant reference to member arr_f
             * @return Constant reference to member arr_f
             */
            eProsima_user_DllExport const std::array<float, 10000>& arr_f() const;

            /*!
             * @brief This function returns a reference to member arr_f
             * @return Reference to member arr_f
             */
            eProsima_user_DllExport std::array<float, 10000>& arr_f();
            /*!
             * @brief This function copies the value in member arr_i32
             * @param _arr_i32 New value to be copied in member arr_i32
             */
            eProsima_user_DllExport void arr_i32(
                    const std::array<int32_t, 10000>& _arr_i32);

            /*!
             * @brief This function moves the value in member arr_i32
             * @param _arr_i32 New value to be moved in member arr_i32
             */
            eProsima_user_DllExport void arr_i32(
                    std::array<int32_t, 10000>&& _arr_i32);

            /*!
             * @brief This function returns a constant reference to member arr_i32
             * @return Constant reference to member arr_i32
             */
            eProsima_user_DllExport const std::array<int32_t, 10000>& arr_i32() const;

            /*!
             * @brief This function returns a reference to member arr_i32
             * @return Reference to member arr_i32
             */
            eProsima_user_DllExport std::array<int32_t, 10000>& arr_i32();
            /*!
             * @brief This function copies the value in member arr_i64
             * @param _arr_i64 New value to be copied in member arr_i64
             */
            eProsima_user_DllExport void arr_i64(
                    const std::array<int64_t, 10000>& _arr_i64);

            /*!
             * @brief This function moves the value in member arr_i64
             * @param _arr_i64 New value to be moved in member arr_i64
             */
            eProsima_user_DllExport void arr_i64(
                    std::array<int64_t, 10000>&& _arr_i64);

            /*!
             * @brief This function returns a constant reference to member arr_i64
             * @return Constant reference to member arr_i64
             */
            eProsima_user_DllExport const std::array<int64_t, 10000>& arr_i64() const;

            /*!
             * @brief This function returns a reference to member arr_i64
             * @return Reference to member arr_i64
             */
            eProsima_user_DllExport std::array<int64_t, 10000>& arr_i64();
            /*!
             * @brief This function copies the value in member arr_u32
             * @param _arr_u32 New value to be copied in member arr_u32
             */
            eProsima_user_DllExport void arr_u32(
                    const std::array<uint32_t, 10000>& _arr_u32);

            /*!
             * @brief This function moves the value in member arr_u32
             * @param _arr_u32 New value to be moved in member arr_u32
             */
            eProsima_user_DllExport void arr_u32(
                    std::array<uint32_t, 10000>&& _arr_u32);

            /*!
             * @brief This function returns a constant reference to member arr_u32
             * @return Constant reference to member arr_u32
             */
            eProsima_user_DllExport const std::array<uint32_t, 10000>& arr_u32() const;

            /*!
             * @brief This function returns a reference to member arr_u32
             * @return Reference to member arr_u32
             */
            eProsima_user_DllExport std::array<uint32_t, 10000>& arr_u32();
            /*!
             * @brief This function copies the value in member arr_u64
             * @param _arr_u64 New value to be copied in member arr_u64
             */
            eProsima_user_DllExport void arr_u64(
                    const std::array<uint64_t, 10000>& _arr_u64);

            /*!
             * @brief This function moves the value in member arr_u64
             * @param _arr_u64 New value to be moved in member arr_u64
             */
            eProsima_user_DllExport void arr_u64(
                    std::array<uint64_t, 10000>&& _arr_u64);

            /*!
             * @brief This function returns a constant reference to member arr_u64
             * @return Constant reference to member arr_u64
             */
            eProsima_user_DllExport const std::array<uint64_t, 10000>& arr_u64() const;

            /*!
             * @brief This function returns a reference to member arr_u64
             * @return Reference to member arr_u64
             */
            eProsima_user_DllExport std::array<uint64_t, 10000>& arr_u64();
            /*!
             * @brief This function copies the value in member arr_bval
             * @param _arr_bval New value to be copied in member arr_bval
             */
            eProsima_user_DllExport void arr_bval(
                    const std::array<bool, 10000>& _arr_bval);

            /*!
             * @brief This function moves the value in member arr_bval
             * @param _arr_bval New value to be moved in member arr_bval
             */
            eProsima_user_DllExport void arr_bval(
                    std::array<bool, 10000>&& _arr_bval);

            /*!
             * @brief This function returns a constant reference to member arr_bval
             * @return Constant reference to member arr_bval
             */
            eProsima_user_DllExport const std::array<bool, 10000>& arr_bval() const;

            /*!
             * @brief This function returns a reference to member arr_bval
             * @return Reference to member arr_bval
             */
            eProsima_user_DllExport std::array<bool, 10000>& arr_bval();
            /*!
             * @brief This function copies the value in member arr_s
             * @param _arr_s New value to be copied in member arr_s
             */
            eProsima_user_DllExport void arr_s(
                    const std::array<std::string, 10000>& _arr_s);

            /*!
             * @brief This function moves the value in member arr_s
             * @param _arr_s New value to be moved in member arr_s
             */
            eProsima_user_DllExport void arr_s(
                    std::array<std::string, 10000>&& _arr_s);

            /*!
             * @brief This function returns a constant reference to member arr_s
             * @return Constant reference to member arr_s
             */
            eProsima_user_DllExport const std::array<std::string, 10000>& arr_s() const;

            /*!
             * @brief This function returns a reference to member arr_s
             * @return Reference to member arr_s
             */
            eProsima_user_DllExport std::array<std::string, 10000>& arr_s();
            /*!
             * @brief This function copies the value in member vec_d
             * @param _vec_d New value to be copied in member vec_d
             */
            eProsima_user_DllExport void vec_d(
                    const std::vector<double>& _vec_d);

            /*!
             * @brief This function moves the value in member vec_d
             * @param _vec_d New value to be moved in member vec_d
             */
            eProsima_user_DllExport void vec_d(
                    std::vector<double>&& _vec_d);

            /*!
             * @brief This function returns a constant reference to member vec_d
             * @return Constant reference to member vec_d
             */
            eProsima_user_DllExport const std::vector<double>& vec_d() const;

            /*!
             * @brief This function returns a reference to member vec_d
             * @return Reference to member vec_d
             */
            eProsima_user_DllExport std::vector<double>& vec_d();
            /*!
             * @brief This function copies the value in member vec_f
             * @param _vec_f New value to be copied in member vec_f
             */
            eProsima_user_DllExport void vec_f(
                    const std::vector<float>& _vec_f);

            /*!
             * @brief This function moves the value in member vec_f
             * @param _vec_f New value to be moved in member vec_f
             */
            eProsima_user_DllExport void vec_f(
                    std::vector<float>&& _vec_f);

            /*!
             * @brief This function returns a constant reference to member vec_f
             * @return Constant reference to member vec_f
             */
            eProsima_user_DllExport const std::vector<float>& vec_f() const;

            /*!
             * @brief This function returns a reference to member vec_f
             * @return Reference to member vec_f
             */
            eProsima_user_DllExport std::vector<float>& vec_f();
            /*!
             * @brief This function copies the value in member vec_i32
             * @param _vec_i32 New value to be copied in member vec_i32
             */
            eProsima_user_DllExport void vec_i32(
                    const std::vector<int32_t>& _vec_i32);

            /*!
             * @brief This function moves the value in member vec_i32
             * @param _vec_i32 New value to be moved in member vec_i32
             */
            eProsima_user_DllExport void vec_i32(
                    std::vector<int32_t>&& _vec_i32);

            /*!
             * @brief This function returns a constant reference to member vec_i32
             * @return Constant reference to member vec_i32
             */
            eProsima_user_DllExport const std::vector<int32_t>& vec_i32() const;

            /*!
             * @brief This function returns a reference to member vec_i32
             * @return Reference to member vec_i32
             */
            eProsima_user_DllExport std::vector<int32_t>& vec_i32();
            /*!
             * @brief This function copies the value in member vec_i64
             * @param _vec_i64 New value to be copied in member vec_i64
             */
            eProsima_user_DllExport void vec_i64(
                    const std::vector<int64_t>& _vec_i64);

            /*!
             * @brief This function moves the value in member vec_i64
             * @param _vec_i64 New value to be moved in member vec_i64
             */
            eProsima_user_DllExport void vec_i64(
                    std::vector<int64_t>&& _vec_i64);

            /*!
             * @brief This function returns a constant reference to member vec_i64
             * @return Constant reference to member vec_i64
             */
            eProsima_user_DllExport const std::vector<int64_t>& vec_i64() const;

            /*!
             * @brief This function returns a reference to member vec_i64
             * @return Reference to member vec_i64
             */
            eProsima_user_DllExport std::vector<int64_t>& vec_i64();
            /*!
             * @brief This function copies the value in member vec_u32
             * @param _vec_u32 New value to be copied in member vec_u32
             */
            eProsima_user_DllExport void vec_u32(
                    const std::vector<uint32_t>& _vec_u32);

            /*!
             * @brief This function moves the value in member vec_u32
             * @param _vec_u32 New value to be moved in member vec_u32
             */
            eProsima_user_DllExport void vec_u32(
                    std::vector<uint32_t>&& _vec_u32);

            /*!
             * @brief This function returns a constant reference to member vec_u32
             * @return Constant reference to member vec_u32
             */
            eProsima_user_DllExport const std::vector<uint32_t>& vec_u32() const;

            /*!
             * @brief This function returns a reference to member vec_u32
             * @return Reference to member vec_u32
             */
            eProsima_user_DllExport std::vector<uint32_t>& vec_u32();
            /*!
             * @brief This function copies the value in member vec_u64
             * @param _vec_u64 New value to be copied in member vec_u64
             */
            eProsima_user_DllExport void vec_u64(
                    const std::vector<uint64_t>& _vec_u64);

            /*!
             * @brief This function moves the value in member vec_u64
             * @param _vec_u64 New value to be moved in member vec_u64
             */
            eProsima_user_DllExport void vec_u64(
                    std::vector<uint64_t>&& _vec_u64);

            /*!
             * @brief This function returns a constant reference to member vec_u64
             * @return Constant reference to member vec_u64
             */
            eProsima_user_DllExport const std::vector<uint64_t>& vec_u64() const;

            /*!
             * @brief This function returns a reference to member vec_u64
             * @return Reference to member vec_u64
             */
            eProsima_user_DllExport std::vector<uint64_t>& vec_u64();
            /*!
             * @brief This function copies the value in member vec_bval
             * @param _vec_bval New value to be copied in member vec_bval
             */
            eProsima_user_DllExport void vec_bval(
                    const std::vector<bool>& _vec_bval);

            /*!
             * @brief This function moves the value in member vec_bval
             * @param _vec_bval New value to be moved in member vec_bval
             */
            eProsima_user_DllExport void vec_bval(
                    std::vector<bool>&& _vec_bval);

            /*!
             * @brief This function returns a constant reference to member vec_bval
             * @return Constant reference to member vec_bval
             */
            eProsima_user_DllExport const std::vector<bool>& vec_bval() const;

            /*!
             * @brief This function returns a reference to member vec_bval
             * @return Reference to member vec_bval
             */
            eProsima_user_DllExport std::vector<bool>& vec_bval();
            /*!
             * @brief This function copies the value in member vec_s
             * @param _vec_s New value to be copied in member vec_s
             */
            eProsima_user_DllExport void vec_s(
                    const std::vector<std::string>& _vec_s);

            /*!
             * @brief This function moves the value in member vec_s
             * @param _vec_s New value to be moved in member vec_s
             */
            eProsima_user_DllExport void vec_s(
                    std::vector<std::string>&& _vec_s);

            /*!
             * @brief This function returns a constant reference to member vec_s
             * @return Constant reference to member vec_s
             */
            eProsima_user_DllExport const std::vector<std::string>& vec_s() const;

            /*!
             * @brief This function returns a reference to member vec_s
             * @return Reference to member vec_s
             */
            eProsima_user_DllExport std::vector<std::string>& vec_s();
            /*!
             * @brief This function copies the value in member own
             * @param _own New value to be copied in member own
             */
            eProsima_user_DllExport void own(
                    const benchmark::idl::Owner& _own);

            /*!
             * @brief This function moves the value in member own
             * @param _own New value to be moved in member own
             */
            eProsima_user_DllExport void own(
                    benchmark::idl::Owner&& _own);

            /*!
             * @brief This function returns a constant reference to member own
             * @return Constant reference to member own
             */
            eProsima_user_DllExport const benchmark::idl::Owner& own() const;

            /*!
             * @brief This function returns a reference to member own
             * @return Reference to member own
             */
            eProsima_user_DllExport benchmark::idl::Owner& own();
            /*!
             * @brief This function copies the value in member arr_own
             * @param _arr_own New value to be copied in member arr_own
             */
            eProsima_user_DllExport void arr_own(
                    const std::array<benchmark::idl::Owner, 10000>& _arr_own);

            /*!
             * @brief This function moves the value in member arr_own
             * @param _arr_own New value to be moved in member arr_own
             */
            eProsima_user_DllExport void arr_own(
                    std::array<benchmark::idl::Owner, 10000>&& _arr_own);

            /*!
             * @brief This function returns a constant reference to member arr_own
             * @return Constant reference to member arr_own
             */
            eProsima_user_DllExport const std::array<benchmark::idl::Owner, 10000>& arr_own() const;

            /*!
             * @brief This function returns a reference to member arr_own
             * @return Reference to member arr_own
             */
            eProsima_user_DllExport std::array<benchmark::idl::Owner, 10000>& arr_own();
            /*!
             * @brief This function copies the value in member vec_own
             * @param _vec_own New value to be copied in member vec_own
             */
            eProsima_user_DllExport void vec_own(
                    const std::vector<benchmark::idl::Owner>& _vec_own);

            /*!
             * @brief This function moves the value in member vec_own
             * @param _vec_own New value to be moved in member vec_own
             */
            eProsima_user_DllExport void vec_own(
                    std::vector<benchmark::idl::Owner>&& _vec_own);

            /*!
             * @brief This function returns a constant reference to member vec_own
             * @return Constant reference to member vec_own
             */
            eProsima_user_DllExport const std::vector<benchmark::idl::Owner>& vec_own() const;

            /*!
             * @brief This function returns a reference to member vec_own
             * @return Reference to member vec_own
             */
            eProsima_user_DllExport std::vector<benchmark::idl::Owner>& vec_own();
            /*!
             * @brief This function copies the value in member own_v2
             * @param _own_v2 New value to be copied in member own_v2
             */
            eProsima_user_DllExport void own_v2(
                    const benchmark::idl::OwnerV2& _own_v2);

            /*!
             * @brief This function moves the value in member own_v2
             * @param _own_v2 New value to be moved in member own_v2
             */
            eProsima_user_DllExport void own_v2(
                    benchmark::idl::OwnerV2&& _own_v2);

            /*!
             * @brief This function returns a constant reference to member own_v2
             * @return Constant reference to member own_v2
             */
            eProsima_user_DllExport const benchmark::idl::OwnerV2& own_v2() const;

            /*!
             * @brief This function returns a reference to member own_v2
             * @return Reference to member own_v2
             */
            eProsima_user_DllExport benchmark::idl::OwnerV2& own_v2();
            /*!
             * @brief This function copies the value in member arr_own_v2
             * @param _arr_own_v2 New value to be copied in member arr_own_v2
             */
            eProsima_user_DllExport void arr_own_v2(
                    const std::array<benchmark::idl::OwnerV2, 10000>& _arr_own_v2);

            /*!
             * @brief This function moves the value in member arr_own_v2
             * @param _arr_own_v2 New value to be moved in member arr_own_v2
             */
            eProsima_user_DllExport void arr_own_v2(
                    std::array<benchmark::idl::OwnerV2, 10000>&& _arr_own_v2);

            /*!
             * @brief This function returns a constant reference to member arr_own_v2
             * @return Constant reference to member arr_own_v2
             */
            eProsima_user_DllExport const std::array<benchmark::idl::OwnerV2, 10000>& arr_own_v2() const;

            /*!
             * @brief This function returns a reference to member arr_own_v2
             * @return Reference to member arr_own_v2
             */
            eProsima_user_DllExport std::array<benchmark::idl::OwnerV2, 10000>& arr_own_v2();
            /*!
             * @brief This function copies the value in member vec_own_v2
             * @param _vec_own_v2 New value to be copied in member vec_own_v2
             */
            eProsima_user_DllExport void vec_own_v2(
                    const std::vector<benchmark::idl::OwnerV2>& _vec_own_v2);

            /*!
             * @brief This function moves the value in member vec_own_v2
             * @param _vec_own_v2 New value to be moved in member vec_own_v2
             */
            eProsima_user_DllExport void vec_own_v2(
                    std::vector<benchmark::idl::OwnerV2>&& _vec_own_v2);

            /*!
             * @brief This function returns a constant reference to member vec_own_v2
             * @return Constant reference to member vec_own_v2
             */
            eProsima_user_DllExport const std::vector<benchmark::idl::OwnerV2>& vec_own_v2() const;

            /*!
             * @brief This function returns a reference to member vec_own_v2
             * @return Reference to member vec_own_v2
             */
            eProsima_user_DllExport std::vector<benchmark::idl::OwnerV2>& vec_own_v2();
            /*!
             * @brief This function copies the value in member own_v3
             * @param _own_v3 New value to be copied in member own_v3
             */
            eProsima_user_DllExport void own_v3(
                    const benchmark::idl::OwnerV3& _own_v3);

            /*!
             * @brief This function moves the value in member own_v3
             * @param _own_v3 New value to be moved in member own_v3
             */
            eProsima_user_DllExport void own_v3(
                    benchmark::idl::OwnerV3&& _own_v3);

            /*!
             * @brief This function returns a constant reference to member own_v3
             * @return Constant reference to member own_v3
             */
            eProsima_user_DllExport const benchmark::idl::OwnerV3& own_v3() const;

            /*!
             * @brief This function returns a reference to member own_v3
             * @return Reference to member own_v3
             */
            eProsima_user_DllExport benchmark::idl::OwnerV3& own_v3();
            /*!
             * @brief This function copies the value in member arr_own_v3
             * @param _arr_own_v3 New value to be copied in member arr_own_v3
             */
            eProsima_user_DllExport void arr_own_v3(
                    const std::array<benchmark::idl::OwnerV3, 10000>& _arr_own_v3);

            /*!
             * @brief This function moves the value in member arr_own_v3
             * @param _arr_own_v3 New value to be moved in member arr_own_v3
             */
            eProsima_user_DllExport void arr_own_v3(
                    std::array<benchmark::idl::OwnerV3, 10000>&& _arr_own_v3);

            /*!
             * @brief This function returns a constant reference to member arr_own_v3
             * @return Constant reference to member arr_own_v3
             */
            eProsima_user_DllExport const std::array<benchmark::idl::OwnerV3, 10000>& arr_own_v3() const;

            /*!
             * @brief This function returns a reference to member arr_own_v3
             * @return Reference to member arr_own_v3
             */
            eProsima_user_DllExport std::array<benchmark::idl::OwnerV3, 10000>& arr_own_v3();
            /*!
             * @brief This function copies the value in member vec_own_v3
             * @param _vec_own_v3 New value to be copied in member vec_own_v3
             */
            eProsima_user_DllExport void vec_own_v3(
                    const std::vector<benchmark::idl::OwnerV3>& _vec_own_v3);

            /*!
             * @brief This function moves the value in member vec_own_v3
             * @param _vec_own_v3 New value to be moved in member vec_own_v3
             */
            eProsima_user_DllExport void vec_own_v3(
                    std::vector<benchmark::idl::OwnerV3>&& _vec_own_v3);

            /*!
             * @brief This function returns a constant reference to member vec_own_v3
             * @return Constant reference to member vec_own_v3
             */
            eProsima_user_DllExport const std::vector<benchmark::idl::OwnerV3>& vec_own_v3() const;

            /*!
             * @brief This function returns a reference to member vec_own_v3
             * @return Reference to member vec_own_v3
             */
            eProsima_user_DllExport std::vector<benchmark::idl::OwnerV3>& vec_own_v3();
            /*!
             * @brief This function copies the value in member own_v4
             * @param _own_v4 New value to be copied in member own_v4
             */
            eProsima_user_DllExport void own_v4(
                    const benchmark::idl::OwnerV4& _own_v4);

            /*!
             * @brief This function moves the value in member own_v4
             * @param _own_v4 New value to be moved in member own_v4
             */
            eProsima_user_DllExport void own_v4(
                    benchmark::idl::OwnerV4&& _own_v4);

            /*!
             * @brief This function returns a constant reference to member own_v4
             * @return Constant reference to member own_v4
             */
            eProsima_user_DllExport const benchmark::idl::OwnerV4& own_v4() const;

            /*!
             * @brief This function returns a reference to member own_v4
             * @return Reference to member own_v4
             */
            eProsima_user_DllExport benchmark::idl::OwnerV4& own_v4();
            /*!
             * @brief This function copies the value in member arr_own_v4
             * @param _arr_own_v4 New value to be copied in member arr_own_v4
             */
            eProsima_user_DllExport void arr_own_v4(
                    const std::array<benchmark::idl::OwnerV4, 10000>& _arr_own_v4);

            /*!
             * @brief This function moves the value in member arr_own_v4
             * @param _arr_own_v4 New value to be moved in member arr_own_v4
             */
            eProsima_user_DllExport void arr_own_v4(
                    std::array<benchmark::idl::OwnerV4, 10000>&& _arr_own_v4);

            /*!
             * @brief This function returns a constant reference to member arr_own_v4
             * @return Constant reference to member arr_own_v4
             */
            eProsima_user_DllExport const std::array<benchmark::idl::OwnerV4, 10000>& arr_own_v4() const;

            /*!
             * @brief This function returns a reference to member arr_own_v4
             * @return Reference to member arr_own_v4
             */
            eProsima_user_DllExport std::array<benchmark::idl::OwnerV4, 10000>& arr_own_v4();
            /*!
             * @brief This function copies the value in member vec_own_v4
             * @param _vec_own_v4 New value to be copied in member vec_own_v4
             */
            eProsima_user_DllExport void vec_own_v4(
                    const std::vector<benchmark::idl::OwnerV4>& _vec_own_v4);

            /*!
             * @brief This function moves the value in member vec_own_v4
             * @param _vec_own_v4 New value to be moved in member vec_own_v4
             */
            eProsima_user_DllExport void vec_own_v4(
                    std::vector<benchmark::idl::OwnerV4>&& _vec_own_v4);

            /*!
             * @brief This function returns a constant reference to member vec_own_v4
             * @return Constant reference to member vec_own_v4
             */
            eProsima_user_DllExport const std::vector<benchmark::idl::OwnerV4>& vec_own_v4() const;

            /*!
             * @brief This function returns a reference to member vec_own_v4
             * @return Reference to member vec_own_v4
             */
            eProsima_user_DllExport std::vector<benchmark::idl::OwnerV4>& vec_own_v4();
            /*!
             * @brief This function sets a value in member pet_type
             * @param _pet_type New value for member pet_type
             */
            eProsima_user_DllExport void pet_type(
                    benchmark::idl::PetType _pet_type);

            /*!
             * @brief This function returns the value of member pet_type
             * @return Value of member pet_type
             */
            eProsima_user_DllExport benchmark::idl::PetType pet_type() const;

            /*!
             * @brief This function returns a reference to member pet_type
             * @return Reference to member pet_type
             */
            eProsima_user_DllExport benchmark::idl::PetType& pet_type();

            /*!
             * @brief This function copies the value in member arr_pet_type
             * @param _arr_pet_type New value to be copied in member arr_pet_type
             */
            eProsima_user_DllExport void arr_pet_type(
                    const std::array<benchmark::idl::PetType, 10000>& _arr_pet_type);

            /*!
             * @brief This function moves the value in member arr_pet_type
             * @param _arr_pet_type New value to be moved in member arr_pet_type
             */
            eProsima_user_DllExport void arr_pet_type(
                    std::array<benchmark::idl::PetType, 10000>&& _arr_pet_type);

            /*!
             * @brief This function returns a constant reference to member arr_pet_type
             * @return Constant reference to member arr_pet_type
             */
            eProsima_user_DllExport const std::array<benchmark::idl::PetType, 10000>& arr_pet_type() const;

            /*!
             * @brief This function returns a reference to member arr_pet_type
             * @return Reference to member arr_pet_type
             */
            eProsima_user_DllExport std::array<benchmark::idl::PetType, 10000>& arr_pet_type();
            /*!
             * @brief This function copies the value in member vec_pet_type
             * @param _vec_pet_type New value to be copied in member vec_pet_type
             */
            eProsima_user_DllExport void vec_pet_type(
                    const std::vector<benchmark::idl::PetType>& _vec_pet_type);

            /*!
             * @brief This function moves the value in member vec_pet_type
             * @param _vec_pet_type New value to be moved in member vec_pet_type
             */
            eProsima_user_DllExport void vec_pet_type(
                    std::vector<benchmark::idl::PetType>&& _vec_pet_type);

            /*!
             * @brief This function returns a constant reference to member vec_pet_type
             * @return Constant reference to member vec_pet_type
             */
            eProsima_user_DllExport const std::vector<benchmark::idl::PetType>& vec_pet_type() const;

            /*!
             * @brief This function returns a reference to member vec_pet_type
             * @return Reference to member vec_pet_type
             */
            eProsima_user_DllExport std::vector<benchmark::idl::PetType>& vec_pet_type();
            /*!
             * @brief This function copies the value in member arr_u8
             * @param _arr_u8 New value to be copied in member arr_u8
             */
            eProsima_user_DllExport void arr_u8(
                    const std::array<uint8_t, 10000>& _arr_u8);

            /*!
             * @brief This function moves the value in member arr_u8
             * @param _arr_u8 New value to be moved in member arr_u8
             */
            eProsima_user_DllExport void arr_u8(
                    std::array<uint8_t, 10000>&& _arr_u8);

            /*!
             * @brief This function returns a constant reference to member arr_u8
             * @return Constant reference to member arr_u8
             */
            eProsima_user_DllExport const std::array<uint8_t, 10000>& arr_u8() const;

            /*!
             * @brief This function returns a reference to member arr_u8
             * @return Reference to member arr_u8
             */
            eProsima_user_DllExport std::array<uint8_t, 10000>& arr_u8();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const benchmark::idl::Pet& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            double m_d;
            float m_f;
            int32_t m_i32;
            int64_t m_i64;
            uint32_t m_u32;
            uint64_t m_u64;
            bool m_bval;
            std::string m_s;
            std::array<double, 10000> m_arr_d;
            std::array<float, 10000> m_arr_f;
            std::array<int32_t, 10000> m_arr_i32;
            std::array<int64_t, 10000> m_arr_i64;
            std::array<uint32_t, 10000> m_arr_u32;
            std::array<uint64_t, 10000> m_arr_u64;
            std::array<bool, 10000> m_arr_bval;
            std::array<std::string, 10000> m_arr_s;
            std::vector<double> m_vec_d;
            std::vector<float> m_vec_f;
            std::vector<int32_t> m_vec_i32;
            std::vector<int64_t> m_vec_i64;
            std::vector<uint32_t> m_vec_u32;
            std::vector<uint64_t> m_vec_u64;
            std::vector<bool> m_vec_bval;
            std::vector<std::string> m_vec_s;
            benchmark::idl::Owner m_own;
            std::array<benchmark::idl::Owner, 10000> m_arr_own;
            std::vector<benchmark::idl::Owner> m_vec_own;
            benchmark::idl::OwnerV2 m_own_v2;
            std::array<benchmark::idl::OwnerV2, 10000> m_arr_own_v2;
            std::vector<benchmark::idl::OwnerV2> m_vec_own_v2;
            benchmark::idl::OwnerV3 m_own_v3;
            std::array<benchmark::idl::OwnerV3, 10000> m_arr_own_v3;
            std::vector<benchmark::idl::OwnerV3> m_vec_own_v3;
            benchmark::idl::OwnerV4 m_own_v4;
            std::array<benchmark::idl::OwnerV4, 10000> m_arr_own_v4;
            std::vector<benchmark::idl::OwnerV4> m_vec_own_v4;
            benchmark::idl::PetType m_pet_type;
            std::array<benchmark::idl::PetType, 10000> m_arr_pet_type;
            std::vector<benchmark::idl::PetType> m_vec_pet_type;
            std::array<uint8_t, 10000> m_arr_u8;

        };
    } // namespace idl
} // namespace benchmark

#endif // _FAST_DDS_GENERATED_BENCHMARK_IDL_PET_H_

