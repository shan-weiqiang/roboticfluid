from typing import Any, List
from roboticfluid_py.rf_owner import Owner, OwnerV2
from roboticfluid_py.rf_owner.nested import OwnerV3
from roboticfluid_py import OwnerV4

class PetType:
    DOG: int
    CAT: int
    BIRD: int
    FISH: int
    HAMSTER: int
    RABBIT: int
    SNAKE: int
    LIZARD: int
    FERRET: int
    GUINEA_PIG: int

class Pet:
    own: Owner
    arr_own: List[Owner]  # length=10000
    arr_own_v2: List[OwnerV2]  # length=10000
    arr_own_v3: List[OwnerV3]  # length=10000
    arr_own_v4: List[OwnerV4]  # length=10000
    vec_own: List[Owner]
    pet_type: PetType
    arr_pet_type: List[PetType]  # length=10000
    vec_pet_type: List[PetType]
    arr_u8: List[int]  # length=10000
    d: float
    f: float
    i32: int
    i64: int
    u32: int
    u64: int
    bval: bool
    s: str
    arr_d: List[float]  # length=10000
    arr_f: List[float]  # length=10000
    arr_i32: List[int]  # length=10000
    arr_i64: List[int]  # length=10000
    arr_u32: List[int]  # length=10000
    arr_u64: List[int]  # length=10000
    arr_bval: List[bool]  # length=10000
    arr_s: List[str]  # length=10000
    vec_d: List[float]
    vec_f: List[float]
    vec_i32: List[int]
    vec_i64: List[int]
    vec_u32: List[int]
    vec_u64: List[int]
    vec_bval: List[bool]
    vec_s: List[str]

    def __init__(self) -> None: ...
    def bark(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(self, src: bytes) -> None: ...
    def dump_compressed(self) -> bytes: ...
    def load_compressed(self, src: bytes) -> bool: ...
    def get_own(self) -> Owner: ...
    def set_own(self, val: Owner) -> None: ...
    def get_arr_own(self) -> List[Owner]: ...
    def set_arr_own(self, val: List[Owner]) -> None: ...  # length=10000
    def get_arr_own_v2(self) -> List[OwnerV2]: ...  # length=10000
    def set_arr_own_v2(self, val: List[OwnerV2]) -> None: ...  # length=10000
    def get_arr_own_v3(self) -> List[OwnerV3]: ...  # length=10000
    def set_arr_own_v3(self, val: List[OwnerV3]) -> None: ...  # length=10000
    def get_arr_own_v4(self) -> List[OwnerV4]: ...  # length=10000
    def set_arr_own_v4(self, val: List[OwnerV4]) -> None: ...  # length=10000
    def get_vec_own(self) -> List[Owner]: ...
    def set_vec_own(self, val: List[Owner]) -> None: ...
    def get_pet_type(self) -> PetType: ...
    def set_pet_type(self, val: PetType) -> None: ...
    def get_arr_pet_type(self) -> List[PetType]: ...
    def set_arr_pet_type(self, val: List[PetType]) -> None: ...  # length=10000
    def get_vec_pet_type(self) -> List[PetType]: ...
    def set_vec_pet_type(self, val: List[PetType]) -> None: ...
    def get_arr_u8(self) -> List[int]: ...
    def set_arr_u8(self, val: List[int]) -> None: ...  # length=10000
    def get_d(self) -> float: ...
    def set_d(self, val: float) -> None: ...
    def get_f(self) -> float: ...
    def set_f(self, val: float) -> None: ...
    def get_i32(self) -> int: ...
    def set_i32(self, val: int) -> None: ...
    def get_i64(self) -> int: ...
    def set_i64(self, val: int) -> None: ...
    def get_u32(self) -> int: ...
    def set_u32(self, val: int) -> None: ...
    def get_u64(self) -> int: ...
    def set_u64(self, val: int) -> None: ...
    def get_bval(self) -> bool: ...
    def set_bval(self, val: bool) -> None: ...
    def get_s(self) -> str: ...
    def set_s(self, val: str) -> None: ...
    def get_arr_d(self) -> List[float]: ...
    def set_arr_d(self, val: List[float]) -> None: ...  # length=10000
    def get_arr_f(self) -> List[float]: ...
    def set_arr_f(self, val: List[float]) -> None: ...  # length=10000
    def get_arr_i32(self) -> List[int]: ...
    def set_arr_i32(self, val: List[int]) -> None: ...  # length=10000
    def get_arr_i64(self) -> List[int]: ...
    def set_arr_i64(self, val: List[int]) -> None: ...  # length=10000
    def get_arr_u32(self) -> List[int]: ...
    def set_arr_u32(self, val: List[int]) -> None: ...  # length=10000
    def get_arr_u64(self) -> List[int]: ...
    def set_arr_u64(self, val: List[int]) -> None: ...  # length=10000
    def get_arr_bval(self) -> List[bool]: ...
    def set_arr_bval(self, val: List[bool]) -> None: ...  # length=10000
    def get_arr_s(self) -> List[str]: ...
    def set_arr_s(self, val: List[str]) -> None: ...  # length=10000
    def get_vec_d(self) -> List[float]: ...
    def set_vec_d(self, val: List[float]) -> None: ...
    def get_vec_f(self) -> List[float]: ...
    def set_vec_f(self, val: List[float]) -> None: ...
    def get_vec_i32(self) -> List[int]: ...
    def set_vec_i32(self, val: List[int]) -> None: ...
    def get_vec_i64(self) -> List[int]: ...
    def set_vec_i64(self, val: List[int]) -> None: ...
    def get_vec_u32(self) -> List[int]: ...
    def set_vec_u32(self, val: List[int]) -> None: ...
    def get_vec_u64(self) -> List[int]: ...
    def set_vec_u64(self, val: List[int]) -> None: ...
    def get_vec_bval(self) -> List[bool]: ...
    def set_vec_bval(self, val: List[bool]) -> None: ...
    def get_vec_s(self) -> List[str]: ...
    def set_vec_s(self, val: List[str]) -> None: ... 